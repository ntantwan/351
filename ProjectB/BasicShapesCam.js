//3456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_
// (JT: why the numbers? counts columns, helps me keep 80-char-wide listings)
//
// Chapter 5: ColoredTriangle.js (c) 2012 matsuda  AND
// Chapter 4: RotatingTriangle_withButtons.js (c) 2012 matsuda
// became:
//
// BasicShapes.js  MODIFIED for EECS 351-1, 
//									Northwestern Univ. Jack Tumblin
//		--converted from 2D to 4D (x,y,z,w) vertices
//		--extend to other attributes: color, surface normal, etc.
//		--demonstrate how to keep & use MULTIPLE colored shapes in just one
//			Vertex Buffer Object(VBO). 
//		--create several canonical 3D shapes borrowed from 'GLUT' library:
//		--Demonstrate how to make a 'stepped spiral' tri-strip,  and use it
//			to build a cylinder, sphere, and torus.
//
// Vertex shader program----------------------------------

var VSHADER_SOURCE = 
  'uniform mat4 u_ModelMatrix;\n' +
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Color;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_ModelMatrix * a_Position;\n' +
  '  gl_PointSize = 10.0;\n' +
  '  v_Color = a_Color;\n' +
  '}\n';

// Fragment shader program----------------------------------
var FSHADER_SOURCE = 
//  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
//  '#endif GL_ES\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Color;\n' +
  '}\n';

// Global Variables
var currentAngle = 0.0;
var ANGLE_STEP = 45.0;		// Rotation angle rate (degrees/second)
var floatsPerVertex = 7;	// # of Float32Array elements used for each vertex

var angle1 = 0
var angle1rate = 45.0

cameraX = 5
cameraY = 5
cameraZ = 3
lookX = -1
lookY = -2
lookZ = -5
												
sphere = [
0.19 , 0 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0.2545 , 0.2545 , -0.8 , 1 , 0.8 , 1 , 0.8 ,
0.2545 , -0.2545 , -0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.19 , 0 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , 0.2545 , -0.8 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.19 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.19 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , 0.2545 , -0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , -0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.19 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.2545 , 0.2545 , -0.8 , 1 , 0.7 , 1 , 0.9 ,
-0.19 , 0 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0.19 , 0 , -0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.0 , 0.0 , -1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0.0 , -0.0 , -1.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.19 , 0 , -0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.0 , 0.0 , -1.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.19 , -0.9 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.19 , -0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.0 , 0.0 , -1.0 , 1 , 0.7 , 1 , 0.9 ,
-0.0 , 0.0 , -1.0 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.19 , -0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.0 , 0.0 , -1.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.19 , 0 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.19 , 0 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , -0.8 , 1 , 0.8 , 1 , 0.8 ,
-0.2545 , -0.2545 , -0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.19 , 0 , -0.9 , 1 , 0.7 , 1 , 0.9 ,
-0.2545 , -0.2545 , -0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.19 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.19 , -0.9 , 1 , 0.8 , 1 , 0.8 ,
-0.2545 , -0.2545 , -0.8 , 1 , 0.8 , 1 , 0.8 ,
0.2545 , -0.2545 , -0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.19 , 0 , -0.9 , 1 , 0.7 , 1 , 0.9 ,
0.2545 , -0.2545 , -0.8 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.19 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.19 , 0 , -0.9 , 1 , 0.7 , 1 , 0.9 ,
-0.0 , 0.0 , -1.0 , 1 , 0.8 , 1 , 0.8 ,
-0.0 , -0.0 , -1.0 , 1 , 0.8 , 1 , 0.8 ,
-0.19 , 0 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.0 , -0.0 , -1.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.19 , -0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.19 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.0 , -0.0 , -1.0 , 1 , 0.7 , 1 , 0.9 ,
0.0 , -0.0 , -1.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.19 , 0 , -0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.0 , -0.0 , -1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.19 , -0.9 , 1 , 0.8 , 1 , 0.8 ,
0.51 , 0 , -0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.51 , 0 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.51 , -0.7 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.51 , -0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.51 , -0.7 , 1 , 0.8 , 1 , 0.8 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.8 , 1 , 0.8 ,
-0.51 , 0 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.51 , 0 , -0.7 , 1 , 0.7 , 1 , 0.9 ,
0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.7 , 1 , 0.9 ,
0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.7 , 1 , 0.9 ,
0.51 , 0 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.51 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.51 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.51 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.7 , 1 , 0.9 ,
-0.51 , 0 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , -0.7 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , -0.7 , 1 , 0.8 , 1 , 0.8 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.51 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.51 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.51 , 0 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.51 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , -0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.7 , 1 , 0.9 ,
-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , -0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.51 , -0.7 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.51 , -0.7 , 1 , 0.7 , 1 , 0.9 ,
-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.51 , 0 , -0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.51 , -0.7 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , -0.5 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , -0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.75 , -0.5 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.75 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.8 , 1 , 0.8 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , -0.5 , 1 , 0.7 , 1 , 0.9 ,
0.75 , 0 , -0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.75 , 0 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , -0.5 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.75 , -0.5 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.75 , 0 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.75 , 0 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.75 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.75 , -0.5 , 1 , 0.8 , 1 , 0.8 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , -0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.75 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , -0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.75 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.75 , -0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.75 , 0 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.75 , -0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , -0.3 , 1 , 0.8 , 1 , 0.8 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.91 , -0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.91 , -0.3 , 1 , 0.7 , 1 , 0.9 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.91 , -0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , -0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.91 , -0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.91 , -0.3 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.91 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.91 , 0 , -0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.8 , 1 , 0.8 ,
-0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.91 , -0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.91 , -0.3 , 1 , 0.8 , 1 , 0.8 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
0.91 , 0 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.91 , -0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.91 , 0 , -0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.91 , 0 , -0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , -0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , -0.3 , 1 , 0.8 , 1 , 0.8 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 1 , 0.8 ,
0.91 , 0 , -0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.91 , -0.3 , 1 , 0.7 , 1 , 0.9 ,
0.99 , 0 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
0.707 , 0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0.707 , -0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.99 , 0 , -0.1 , 1 , 0.8 , 1 , 0.8 ,
0.707 , 0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.99 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.99 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.707 , 0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.707 , 0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
-0.707 , 0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.99 , 0 , -0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0.99 , 0 , -0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.99 , 0 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.7 , 1 , 0.9 ,
-0.99 , 0 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
-0.99 , 0 , -0.1 , 1 , 0.8 , 1 , 0.8 ,
-0.707 , 0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.707 , -0.707 , 0.0 , 1 , 0.7 , 1 , 0.9 ,
-0.99 , 0 , -0.1 , 1 , 0.7 , 1 , 0.9 ,
-0.707 , -0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.99 , -0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.99 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.707 , -0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.707 , -0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0.99 , 0 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.707 , -0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.99 , -0.1 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.99 , 0 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.99 , 0 , -0.1 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.99 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.99 , -0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.8 , 1 , 0.8 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.8 , 1 , 0.8 ,
0.99 , 0 , -0.1 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.99 , -0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0.99 , 0 , 0.1 , 1 , 0.7 , 1 , 0.9 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.99 , 0 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.99 , 0.1 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.99 , 0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.8 , 1 , 0.8 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.99 , 0.1 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.99 , 0 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
0.99 , 0 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.707 , 0.707 , 0.0 , 1 , 0.7 , 1 , 0.9 ,
0.707 , -0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.99 , 0 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
0.707 , 0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.99 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.99 , 0.1 , 1 , 0.7 , 1 , 0.9 ,
0.707 , 0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.707 , 0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.99 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
-0.707 , 0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.99 , 0 , 0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.99 , 0 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.8 , 1 , 0.8 ,
-0.99 , 0 , 0.1 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.99 , 0.1 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.99 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.99 , 0 , 0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.99 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
-0.99 , 0 , 0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.707 , 0.707 , 0.0 , 1 , 0.7 , 1 , 0.9 ,
-0.707 , -0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.99 , 0 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.707 , -0.707 , 0.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.99 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.99 , 0.1 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.707 , -0.707 , 0.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.707 , -0.707 , 0.0 , 1 , 0.8 , 1 , 0.8 ,
0.99 , 0 , 0.1 , 1 , 0.8 , 1 , 0.8 ,
0.707 , -0.707 , 0.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.99 , 0.1 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.91 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.91 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
-0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.91 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.91 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.91 , 0 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.91 , 0 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.91 , 0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.91 , 0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.91 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.75 , 0 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.75 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.75 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
-0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.75 , 0 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.75 , 0 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
0.75 , 0 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0.51 , 0 , 0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.8 , 1 , 0.8 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.5255 , 0.651 , 0.549 ,
0.51 , 0 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.51 , 0.7 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.51 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , 0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.51 , 0 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0.51 , 0 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.51 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.51 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
-0.51 , 0 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.51 , 0 , 0.7 , 1 , 0.7 , 1 , 0.9 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.51 , 0 , 0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.51 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.51 , 0 , 0.7 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
-0.51 , 0 , 0.7 , 1 , 0.8 , 1 , 0.8 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.51 , 0.7 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.51 , 0 , 0.7 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.51 , 0.7 , 1 , 0.5255 , 0.651 , 0.549 ,
0.19 , 0 , 0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0.0 , 0.0 , 1.0 , 1 , 0.7 , 1 , 0.9 ,
0.0 , -0.0 , 1.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.19 , 0 , 0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
0.0 , 0.0 , 1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.19 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.19 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.0 , 0.0 , 1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.0 , 0.0 , 1.0 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.19 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.0 , 0.0 , 1.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.19 , 0 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.19 , 0 , 0.9 , 1 , 0.8 , 1 , 0.8 ,
0.2545 , 0.2545 , 0.8 , 1 , 0.8 , 1 , 0.8 ,
0.2545 , -0.2545 , 0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
0.19 , 0 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.2545 , 0.2545 , 0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.19 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.19 , 0.9 , 1 , 0.7 , 1 , 0.9 ,
0.2545 , 0.2545 , 0.8 , 1 , 0.8 , 1 , 0.8 ,
-0.2545 , 0.2545 , 0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.19 , 0.9 , 1 , 0.7 , 1 , 0.9 ,
-0.2545 , 0.2545 , 0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.19 , 0 , 0.9 , 1 , 0.8 , 1 , 0.8 ,
-0.19 , 0 , 0.9 , 1 , 0.7 , 1 , 0.9 ,
-0.0 , 0.0 , 1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.0 , -0.0 , 1.0 , 1 , 0.7 , 1 , 0.9 ,
-0.19 , 0 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.0 , -0.0 , 1.0 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.19 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , -0.19 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.0 , -0.0 , 1.0 , 1 , 0.7 , 1 , 0.9 ,
0.0 , -0.0 , 1.0 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.19 , 0 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.0 , -0.0 , 1.0 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.19 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.19 , 0 , 0.9 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.2545 , 0.2545 , 0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , -0.2545 , 0.8 , 1 , 0.7 , 1 , 0.9 ,
-0.19 , 0 , 0.9 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.2545 , -0.2545 , 0.8 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.19 , 0.9 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.19 , 0.9 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.2545 , -0.2545 , 0.8 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.2545 , -0.2545 , 0.8 , 1 , 0.7 , 1 , 0.9 ,
0.19 , 0 , 0.9 , 1 , 0.7 , 1 , 0.9 ,
0.2545 , -0.2545 , 0.8 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.19 , 0.9 , 1 , 0.8 , 1 , 0.8 ];

sl1 = [
	0.19 , 0 , -0.9 , 1 , 1.0 , 0.8 , 0.8 ,
	0.2545 , 0.2545 , -0.8 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0.2545 , -0.2545 , -0.8 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0.19 , 0 , -0.9 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.2545 , 0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , 0.19 , -0.9 , 1 , 0.651 , 0.1373 , 0.4 ,
	0 , 0.19 , -0.9 , 1 , 1 , 1 , 1 ,
	0.2545 , 0.2545 , -0.8 , 1 , 1.0 , 0.7 , 0.9 ,
	-0.2545 , 0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , 0.19 , -0.9 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.2545 , 0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.19 , 0 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0.19 , 0 , -0.9 , 1 , 1.0 , 0.8 , 0.8 ,
	0.0 , 0.0 , -1.0 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.0 , -0.0 , -1.0 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.19 , 0 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0.0 , 0.0 , -1.0 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0 , 0.19 , -0.9 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0 , 0.19 , -0.9 , 1 , 1.0 , 0.7 , 0.9 ,
	0.0 , 0.0 , -1.0 , 1 , 0.9216 , 0.298 , 0.2039 ,
	-0.0 , 0.0 , -1.0 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , 0.19 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	-0.0 , 0.0 , -1.0 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.19 , 0 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	-0.19 , 0 , -0.9 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.2545 , 0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.2545 , -0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.19 , 0 , -0.9 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.2545 , -0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , -0.19 , -0.9 , 1 , 1 , 1 , 1 ,
	0 , -0.19 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	-0.2545 , -0.2545 , -0.8 , 1 , 1.0 , 0.8 , 0.8 ,
	0.2545 , -0.2545 , -0.8 , 1 , 1 , 1 , 1 ,
	0.19 , 0 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0.2545 , -0.2545 , -0.8 , 1 , 0.651 , 0.1373 , 0.4 ,
	0 , -0.19 , -0.9 , 1 , 1 , 1 , 1 ,
	-0.19 , 0 , -0.9 , 1 , 1 , 1 , 1 ,
	-0.0 , 0.0 , -1.0 , 1 , 1 , 1 , 1 ,
	-0.0 , -0.0 , -1.0 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.19 , 0 , -0.9 , 1 , 1.0 , 0.7 , 0.9 ,
	-0.0 , -0.0 , -1.0 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0 , -0.19 , -0.9 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0 , -0.19 , -0.9 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.0 , -0.0 , -1.0 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.0 , -0.0 , -1.0 , 1 , 1.0 , 0.7 , 0.9 ,
	0.19 , 0 , -0.9 , 1 , 1 , 1 , 1 ,
	0.0 , -0.0 , -1.0 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , -0.19 , -0.9 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0.51 , 0 , -0.7 , 1 , 1.0 , 0.7 , 0.9 ,
	0.4525 , 0.4525 , -0.6 , 1 , 1 , 1 , 1 ,
	0.4525 , -0.4525 , -0.6 , 1 , 1.0 , 0.7 , 0.9 ,
	0.51 , 0 , -0.7 , 1 , 1.0 , 0.8 , 0.8 ,
	0.4525 , 0.4525 , -0.6 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0 , 0.51 , -0.7 , 1 , 1 , 1 , 1 ,
	0 , 0.51 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.4525 , 0.4525 , -0.6 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.4525 , 0.4525 , -0.6 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0 , 0.51 , -0.7 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.4525 , 0.4525 , -0.6 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	-0.51 , 0 , -0.7 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0.51 , 0 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.51 , 0 , -0.7 , 1 , 0.9216 , 0.298 , 0.2039 ,
	0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	0 , 0.51 , -0.7 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , 0.51 , -0.7 , 1 , 1.0 , 0.7 , 0.9 ,
	0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0 , 0.51 , -0.7 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.51 , 0 , -0.7 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.51 , 0 , -0.7 , 1 , 0.9216 , 0.298 , 0.2039 ,
	-0.4525 , 0.4525 , -0.6 , 1 , 1.0 , 0.7 , 0.9 ,
	-0.4525 , -0.4525 , -0.6 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.51 , 0 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.4525 , -0.4525 , -0.6 , 1 , 1.0 , 0.7 , 0.9 ,
	0 , -0.51 , -0.7 , 1 , 1 , 1 , 1 ,
	0 , -0.51 , -0.7 , 1 , 1 , 1 , 1 ,
	-0.4525 , -0.4525 , -0.6 , 1 , 1 , 1 , 1 ,
	0.4525 , -0.4525 , -0.6 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0.51 , 0 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.4525 , -0.4525 , -0.6 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , -0.51 , -0.7 , 1 , 1.0 , 0.7 , 0.9 ,
	-0.51 , 0 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.2545 , 0.2545 , -0.7999999999999999 , 1 , 1.0 , 0.8 , 0.8 ,
	-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.9216 , 0.298 , 0.2039 ,
	-0.51 , 0 , -0.7 , 1 , 1.0 , 0.7 , 0.9 ,
	-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 1.0 , 0.8 , 0.8 ,
	0 , -0.51 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	0 , -0.51 , -0.7 , 1 , 0.651 , 0.1373 , 0.4 ,
	-0.2545 , -0.2545 , -0.7999999999999999 , 1 , 1 , 1 , 1 ,
	0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.651 , 0.1373 , 0.4 ,
	0.51 , 0 , -0.7 , 1 , 1 , 1 , 1 ,
	0.2545 , -0.2545 , -0.7999999999999999 , 1 , 0.7882 , 0.2941 , 0.2941 ,
	0 , -0.51 , -0.7 , 1 , 0.7882 , 0.2941 , 0.2941 
]

sl2 = [
	0.75 , 0 , -0.5 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.8 , 0.8 , 1 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.9 , 0.7 , 1 ,
0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
0.5939 , 0.5939 , -0.4 , 1 , 1 , 1 , 1 ,
0 , 0.75 , -0.5 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , 0.75 , -0.5 , 1 , 1 , 1 , 1 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.4627 , 0.4745 , 0.6784 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.9 , 0.7 , 1 ,
0 , 0.75 , -0.5 , 1 , 0.5137 , 0.5725 , 0.6588 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.4627 , 0.4745 , 0.6784 ,
-0.75 , 0 , -0.5 , 1 , 1 , 1 , 1 ,
0.75 , 0 , -0.5 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0.75 , 0 , -0.5 , 1 , 0.9 , 0.7 , 1 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.8 , 0.8 , 1 ,
0 , 0.75 , -0.5 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0 , 0.75 , -0.5 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0.4525 , 0.4525 , -0.6 , 1 , 0.9 , 0.7 , 1 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , 0.75 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
-0.75 , 0 , -0.5 , 1 , 0.4627 , 0.4745 , 0.6784 ,
-0.5939 , 0.5939 , -0.4 , 1 , 1 , 1 , 1 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.9 , 0.7 , 1 ,
-0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 0.8 , 1 ,
0 , -0.75 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
0 , -0.75 , -0.5 , 1 , 1 , 1 , 1 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8588 , 0.7725 , 0.851 ,
0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.8 , 0.8 , 1 ,
0 , -0.75 , -0.5 , 1 , 1 , 1 , 1 ,
-0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
-0.4525 , 0.4525 , -0.6 , 1 , 0.8 , 0.8 , 1 ,
-0.4525 , -0.4525 , -0.6 , 1 , 1 , 1 , 1 ,
-0.75 , 0 , -0.5 , 1 , 0.8 , 0.8 , 1 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0 , -0.75 , -0.5 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , -0.75 , -0.5 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.4525 , -0.4525 , -0.6 , 1 , 0.8588 , 0.7725 , 0.851 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.8 , 0.8 , 1 ,
0.75 , 0 , -0.5 , 1 , 0.8588 , 0.7725 , 0.851 ,
0.4525 , -0.4525 , -0.6 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0 , -0.75 , -0.5 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.91 , 0 , -0.3 , 1 , 0.8 , 0.8 , 1 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.9 , 0.7 , 1 ,
0.91 , 0 , -0.3 , 1 , 0.9 , 0.7 , 1 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , 0.91 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , 0.91 , -0.3 , 1 , 0.9 , 0.7 , 1 ,
0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 1 , 1 , 1 ,
0 , 0.91 , -0.3 , 1 , 1 , 1 , 1 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 0.5137 , 0.5725 , 0.6588 ,
-0.91 , 0 , -0.3 , 1 , 0.8 , 0.8 , 1 ,
0.91 , 0 , -0.3 , 1 , 0.9 , 0.7 , 1 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0.5939 , -0.5939 , -0.4 , 1 , 1 , 1 , 1 ,
0.91 , 0 , -0.3 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.8 , 0.8 , 1 ,
0 , 0.91 , -0.3 , 1 , 1 , 1 , 1 ,
0 , 0.91 , -0.3 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0.5939 , 0.5939 , -0.4 , 1 , 0.5137 , 0.5725 , 0.6588 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , 0.91 , -0.3 , 1 , 0.4627 , 0.4745 , 0.6784 ,
-0.5939 , 0.5939 , -0.4 , 1 , 1 , 1 , 1 ,
-0.91 , 0 , -0.3 , 1 , 0.8 , 0.8 , 1 ,
-0.91 , 0 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.6787 , 0.6787 , -0.19999999999999998 , 1 , 1 , 1 , 1 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 1 , 1 , 1 ,
-0.91 , 0 , -0.3 , 1 , 0.5137 , 0.5725 , 0.6588 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.9 , 0.7 , 1 ,
0 , -0.91 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , -0.91 , -0.3 , 1 , 0.8 , 0.8 , 1 ,
-0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.8588 , 0.7725 , 0.851 ,
0.91 , 0 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
0.6787 , -0.6787 , -0.19999999999999998 , 1 , 0.8588 , 0.7725 , 0.851 ,
0 , -0.91 , -0.3 , 1 , 0.4627 , 0.4745 , 0.6784 ,
-0.91 , 0 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.5939 , 0.5939 , -0.4 , 1 , 0.9 , 0.7 , 1 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.5137 , 0.5725 , 0.6588 ,
-0.91 , 0 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0 , -0.91 , -0.3 , 1 , 1 , 1 , 1 ,
0 , -0.91 , -0.3 , 1 , 0.9 , 0.7 , 1 ,
-0.5939 , -0.5939 , -0.4 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.91 , 0 , -0.3 , 1 , 0.4627 , 0.4745 , 0.6784 ,
0.5939 , -0.5939 , -0.4 , 1 , 0.5137 , 0.5725 , 0.6588 ,
0 , -0.91 , -0.3 , 1 , 0.8588 , 0.7725 , 0.851
]

sl3 = [
	0.99 , 0 , -0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0.707 , 0.707 , 0.0 , 1 , 0.8 , 0.8 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0.99 , 0 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0.707 , 0.707 , 0.0 , 1 , 0.9 , 0.7 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
0.707 , 0.707 , 0.0 , 1 , 0.9 , 0.7 , 1.0 ,
-0.707 , 0.707 , 0.0 , 1 , 0.9 , 0.7 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
-0.707 , 0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.99 , 0 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0.99 , 0 , -0.1 , 1 , 0.9 , 0.7 , 1.0 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0.99 , 0 , -0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.9 , 0.7 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0.6787 , 0.6787 , -0.2 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.7 , 0.9 , 1.0 ,
0 , 0.99 , -0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.99 , 0 , -0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.99 , 0 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
-0.707 , 0.707 , 0.0 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.707 , -0.707 , 0.0 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.99 , 0 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
-0.707 , -0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0 , -0.99 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0 , -0.99 , -0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.707 , -0.707 , 0.0 , 1 , 0.7 , 0.9 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0.99 , 0 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.7 , 0.9 , 1.0 ,
0 , -0.99 , -0.1 , 1 , 0.9 , 0.7 , 1.0 ,
-0.99 , 0 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
-0.6787 , 0.6787 , -0.2 , 1 , 0.7 , 0.9 , 1.0 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.99 , 0 , -0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.9 , 0.7 , 1.0 ,
0 , -0.99 , -0.1 , 1 , 0.9 , 0.7 , 1.0 ,
0 , -0.99 , -0.1 , 1 , 0.8 , 0.8 , 1.0 ,
-0.6787 , -0.6787 , -0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.7 , 0.9 , 1.0 ,
0.99 , 0 , -0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0.6787 , -0.6787 , -0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0 , -0.99 , -0.1 , 1 , 0.9 , 0.7 , 1.0 ,
0.99 , 0 , 0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.9 , 0.7 , 1.0 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0.99 , 0 , 0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0 , 0.99 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
0 , 0.99 , 0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.7 , 0.9 , 1.0 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.0 , 0.3765 , 0.4588 ,
0 , 0.99 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.7 , 0.9 , 1.0 ,
-0.99 , 0 , 0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0.99 , 0 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
0.707 , 0.707 , 0.0 , 1 , 0.8 , 0.8 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.8 , 0.8 , 1.0 ,
0.99 , 0 , 0.1 , 1 , 0.9 , 0.7 , 1.0 ,
0.707 , 0.707 , 0.0 , 1 , 0.0 , 0.3765 , 0.4588 ,
0 , 0.99 , 0.1 , 1 , 0.7 , 0.9 , 1.0 ,
0 , 0.99 , 0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0.707 , 0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.707 , 0.707 , 0.0 , 1 , 0.9 , 0.7 , 1.0 ,
0 , 0.99 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.707 , 0.707 , 0.0 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.99 , 0 , 0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
-0.99 , 0 , 0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.6787 , 0.6787 , 0.2 , 1 , 0.7 , 0.9 , 1.0 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.8 , 0.8 , 1.0 ,
-0.99 , 0 , 0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0 , -0.99 , 0.1 , 1 , 0.2157 , 0.2157 , 0.5294 ,
0 , -0.99 , 0.1 , 1 , 0.9 , 0.7 , 1.0 ,
-0.6787 , -0.6787 , 0.2 , 1 , 0.9 , 0.7 , 1.0 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.0 , 0.3765 , 0.4588 ,
0.99 , 0 , 0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
0.6787 , -0.6787 , 0.2 , 1 , 0.0 , 0.3333 , 1.0 ,
0 , -0.99 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.99 , 0 , 0.1 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.707 , 0.707 , 0.0 , 1 , 0.9 , 0.7 , 1.0 ,
-0.707 , -0.707 , 0.0 , 1 , 0.0 , 0.3333 , 1.0 ,
-0.99 , 0 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.707 , -0.707 , 0.0 , 1 , 0.7 , 0.9 , 1.0 ,
0 , -0.99 , 0.1 , 1 , 0.8 , 0.8 , 1.0 ,
0 , -0.99 , 0.1 , 1 , 0.0 , 0.3765 , 0.4588 ,
-0.707 , -0.707 , 0.0 , 1 , 0.7 , 0.9 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.8 , 0.8 , 1.0 ,
0.99 , 0 , 0.1 , 1 , 0.9 , 0.7 , 1.0 ,
0.707 , -0.707 , 0.0 , 1 , 0.7 , 0.9 , 1.0 ,
0 , -0.99 , 0.1 , 1 , 0.9 , 0.7 , 1.0 
]

sl4 = [
	0.91 , 0 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , 0.91 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.91 , 0 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , 0.6787 , 0.2 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.91 , 0 , 0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.91 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.7 , 1 , 0.9 ,
-0.91 , 0 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.91 , 0 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.91 , 0 , 0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
0 , -0.91 , 0.3 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.91 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.91 , 0.3 , 1 , 0.7 , 1 , 0.9 ,
-0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , 0.6787 , 0.19999999999999998 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.91 , 0 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.91 , 0.3 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.91 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.5255 , 0.651 , 0.549 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.8 , 1 , 0.8 ,
0.91 , 0 , 0.3 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.6787 , -0.6787 , 0.19999999999999998 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.91 , 0.3 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.75 , 0 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.75 , 0 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
0 , 0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.75 , 0 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0 , 0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0 , 0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.75 , 0 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.75 , 0 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
-0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.75 , 0.5 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.5255 , 0.651 , 0.549 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
0.75 , 0 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.75 , 0.5 , 1 , 0.8 , 1 , 0.8 ,
-0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , 0.5939 , 0.4 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.8 , 1 , 0.8 ,
0 , -0.75 , 0.5 , 1 , 0.5255 , 0.651 , 0.549 ,
0 , -0.75 , 0.5 , 1 , 0.7 , 1 , 0.9 ,
-0.5939 , -0.5939 , 0.4 , 1 , 0.5255 , 0.651 , 0.549 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.75 , 0 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
0.5939 , -0.5939 , 0.4 , 1 , 0.4392 , 0.3608 , 0.3373 ,
0 , -0.75 , 0.5 , 1 , 0.4353 , 0.5294 , 0.5176 ,
]

sl5 = [
	0.51 , 0 , 0.7 , 1 , 1 , 1 , 0.7 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 1.0 , 0.7176 , 0.0 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 1.0 , 0.7176 , 0.0 ,
0.51 , 0 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 1 , 1 , 1 ,
0 , 0.51 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
0 , 0.51 , 0.7 , 1 , 0.9 , 0.9 , 0.7 ,
0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 0.9 , 0.9 , 0.7 ,
0 , 0.51 , 0.7 , 1 , 0.9 , 0.9 , 0.7 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.51 , 0 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
0.51 , 0 , 0.7 , 1 , 1 , 1 , 1 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.9647 , 1.0 , 0.0 ,
0.4525 , -0.4525 , 0.6 , 1 , 1 , 1 , 0.7 ,
0.51 , 0 , 0.7 , 1 , 1 , 1 , 1 ,
0.4525 , 0.4525 , 0.6 , 1 , 1 , 1 , 0.7 ,
0 , 0.51 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
0 , 0.51 , 0.7 , 1 , 1 , 1 , 1 ,
0.4525 , 0.4525 , 0.6 , 1 , 0.9 , 0.9 , 0.7 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , 0.51 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.4525 , 0.4525 , 0.6 , 1 , 1 , 1 , 1 ,
-0.51 , 0 , 0.7 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.51 , 0 , 0.7 , 1 , 0.9 , 0.9 , 0.7 ,
-0.2545 , 0.2545 , 0.7999999999999999 , 1 , 1 , 1 , 1 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.51 , 0 , 0.7 , 1 , 1 , 1 , 0.7 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.9647 , 1.0 , 0.0 ,
0 , -0.51 , 0.7 , 1 , 1 , 1 , 1 ,
0 , -0.51 , 0.7 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0.51 , 0 , 0.7 , 1 , 1 , 1 , 0.7 ,
0.2545 , -0.2545 , 0.7999999999999999 , 1 , 0.9 , 0.9 , 0.7 ,
0 , -0.51 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.51 , 0 , 0.7 , 1 , 0.9 , 0.9 , 0.7 ,
-0.4525 , 0.4525 , 0.6 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.4525 , -0.4525 , 0.6 , 1 , 1 , 1 , 1 ,
-0.51 , 0 , 0.7 , 1 , 0.9 , 0.9 , 0.7 ,
-0.4525 , -0.4525 , 0.6 , 1 , 0.9 , 0.9 , 0.7 ,
0 , -0.51 , 0.7 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , -0.51 , 0.7 , 1 , 1 , 1 , 0.7 ,
-0.4525 , -0.4525 , 0.6 , 1 , 1 , 1 , 1 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.9 , 0.9 , 0.7 ,
0.51 , 0 , 0.7 , 1 , 1.0 , 0.7176 , 0.0 ,
0.4525 , -0.4525 , 0.6 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , -0.51 , 0.7 , 1 , 1 , 1 , 1 ,
0.19 , 0 , 0.9 , 1 , 0.9 , 0.9 , 0.7 ,
0.0 , 0.0 , 1.0 , 1 , 1 , 1 , 0.7 ,
0.0 , -0.0 , 1.0 , 1 , 0.9647 , 1.0 , 0.0 ,
0.19 , 0 , 0.9 , 1 , 1 , 1 , 1 ,
0.0 , 0.0 , 1.0 , 1 , 0.9 , 0.9 , 0.7 ,
0 , 0.19 , 0.9 , 1 , 1 , 1 , 1 ,
0 , 0.19 , 0.9 , 1 , 1.0 , 0.7176 , 0.0 ,
0.0 , 0.0 , 1.0 , 1 , 0.9 , 0.9 , 0.7 ,
-0.0 , 0.0 , 1.0 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , 0.19 , 0.9 , 1 , 1 , 1 , 1 ,
-0.0 , 0.0 , 1.0 , 1 , 1 , 1 , 1 ,
-0.19 , 0 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
0.19 , 0 , 0.9 , 1 , 0.9 , 0.9 , 0.7 ,
0.2545 , 0.2545 , 0.8 , 1 , 1 , 1 , 1 ,
0.2545 , -0.2545 , 0.8 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0.19 , 0 , 0.9 , 1 , 0.9 , 0.9 , 0.7 ,
0.2545 , 0.2545 , 0.8 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , 0.19 , 0.9 , 1 , 0.9 , 0.9 , 0.7 ,
0 , 0.19 , 0.9 , 1 , 1.0 , 0.7176 , 0.0 ,
0.2545 , 0.2545 , 0.8 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.2545 , 0.2545 , 0.8 , 1 , 0.7686 , 0.8784 , 0.2824 ,
0 , 0.19 , 0.9 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.2545 , 0.2545 , 0.8 , 1 , 1 , 1 , 0.7 ,
-0.19 , 0 , 0.9 , 1 , 1 , 1 , 0.7 ,
-0.19 , 0 , 0.9 , 1 , 0.7686 , 0.8784 , 0.2824 ,
-0.0 , 0.0 , 1.0 , 1 , 0.7686 , 0.8784 , 0.2824 ,
-0.0 , -0.0 , 1.0 , 1 , 1.0 , 0.7176 , 0.0 ,
-0.19 , 0 , 0.9 , 1 , 0.9 , 0.9 , 0.7 ,
-0.0 , -0.0 , 1.0 , 1 , 1.0 , 0.7176 , 0.0 ,
0 , -0.19 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
0 , -0.19 , 0.9 , 1 , 1 , 1 , 0.7 ,
-0.0 , -0.0 , 1.0 , 1 , 1.0 , 0.7176 , 0.0 ,
0.0 , -0.0 , 1.0 , 1 , 1 , 1 , 1 ,
0.19 , 0 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
0.0 , -0.0 , 1.0 , 1 , 0.9 , 0.9 , 0.7 ,
0 , -0.19 , 0.9 , 1 , 1 , 1 , 0.7 ,
-0.19 , 0 , 0.9 , 1 , 1 , 1 , 0.7 ,
-0.2545 , 0.2545 , 0.8 , 1 , 0.9 , 0.9 , 0.7 ,
-0.2545 , -0.2545 , 0.8 , 1 , 0.7686 , 0.8784 , 0.2824 ,
-0.19 , 0 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.2545 , -0.2545 , 0.8 , 1 , 1 , 1 , 1 ,
0 , -0.19 , 0.9 , 1 , 1 , 1 , 0.7 ,
0 , -0.19 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
-0.2545 , -0.2545 , 0.8 , 1 , 0.9 , 0.9 , 0.7 ,
0.2545 , -0.2545 , 0.8 , 1 , 1.0 , 0.7176 , 0.0 ,
0.19 , 0 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
0.2545 , -0.2545 , 0.8 , 1 , 1 , 1 , 1 ,
0 , -0.19 , 0.9 , 1 , 0.9647 , 1.0 , 0.0 ,
]

spiralsq = [
	0.9004471023526769 , 0.43496553411123023 , 0.45 , 1 , 0.6846 , 0.6286 , 0.4562 ,
1.4004471023526768 , 0.43496553411123023 , 0.45 , 1 , 0.6302 , 0.7032 , 0.2522 ,
0.8775825618903728 , 0.479425538604203 , 0.5 , 1 , 0.2471 , 0.5702 , 0.9096 ,
0.8775825618903728 , 0.479425538604203 , 0.5 , 1 , 0.1013 , 0.7701 , 0.8471 ,
1.3775825618903728 , 0.479425538604203 , 0.5 , 1 , 0.9612 , 0.525 , 0.8833 ,
1.4004471023526768 , 0.43496553411123023 , 0.45 , 1 , 0.5621 , 0.3388 , 0.3459 ,
0.5816830894638835 , 0.8134155047893737 , 0.9500000000000001 , 1 , 0.1361 , 0.432 , 0.1491 ,
1.0816830894638834 , 0.8134155047893737 , 0.9500000000000001 , 1 , 0.8593 , 0.1362 , 0.3074 ,
0.5403023058681398 , 0.8414709848078965 , 1.0 , 1 , 0.9358 , 0.7029 , 0.695 ,
0.5403023058681398 , 0.8414709848078965 , 1.0 , 1 , 0.3854 , 0.8853 , 0.5331 ,
1.0403023058681398 , 0.8414709848078965 , 1.0 , 1 , 0.3515 , 0.1805 , 0.9881 ,
1.0816830894638834 , 0.8134155047893737 , 0.9500000000000001 , 1 , 0.6422 , 0.8372 , 0.4725 ,
0.1205027693673664 , 0.9927129910375885 , 1.4500000000000002 , 1 , 0.1976 , 0.5329 , 0.0841 ,
0.6205027693673664 , 0.9927129910375885 , 1.4500000000000002 , 1 , 0.1742 , 0.9687 , 0.4326 ,
0.0707372016677029 , 0.9974949866040544 , 1.5 , 1 , 0.8749 , 0.7218 , 0.9792 ,
0.0707372016677029 , 0.9974949866040544 , 1.5 , 1 , 0.618 , 0.8356 , 0.8703 ,
0.5707372016677029 , 0.9974949866040544 , 1.5 , 1 , 0.9854 , 0.0229 , 0.8356 ,
0.6205027693673664 , 0.9927129910375885 , 1.4500000000000002 , 1 , 0.0328 , 0.3785 , 0.1085 ,
-0.3701808313512871 , 0.9289597150038692 , 1.9500000000000002 , 1 , 0.5063 , 0.9278 , 0.0324 ,
0.1298191686487129 , 0.9289597150038692 , 1.9500000000000002 , 1 , 0.2569 , 0.853 , 0.6111 ,
-0.4161468365471424 , 0.9092974268256817 , 2.0 , 1 , 0.7721 , 0.817 , 0.3933 ,
-0.4161468365471424 , 0.9092974268256817 , 2.0 , 1 , 0.6607 , 0.7618 , 0.5938 ,
0.0838531634528576 , 0.9092974268256817 , 2.0 , 1 , 0.3597 , 0.5446 , 0.7791 ,
0.1298191686487129 , 0.9289597150038692 , 1.9500000000000002 , 1 , 0.0222 , 0.3659 , 0.0412 ,
-0.7702312540473074 , 0.6377647021345036 , 2.45 , 1 , 0.0553 , 0.5221 , 0.1988 ,
-0.2702312540473074 , 0.6377647021345036 , 2.45 , 1 , 0.5789 , 0.4207 , 0.1333 ,
-0.8011436155469337 , 0.5984721441039565 , 2.5 , 1 , 0.5235 , 0.9473 , 0.4154 ,
-0.8011436155469337 , 0.5984721441039565 , 2.5 , 1 , 0.1296 , 0.6295 , 0.4961 ,
-0.3011436155469337 , 0.5984721441039565 , 2.5 , 1 , 0.972 , 0.2851 , 0.8851 ,
-0.2702312540473074 , 0.6377647021345036 , 2.45 , 1 , 0.805 , 0.153 , 0.9582 ,
-0.9817022029984541 , 0.19042264736102704 , 2.95 , 1 , 0.0231 , 0.8439 , 0.2429 ,
-0.4817022029984541 , 0.19042264736102704 , 2.95 , 1 , 0.3347 , 0.8503 , 0.4404 ,
-0.9899924966004454 , 0.1411200080598672 , 3.0 , 1 , 0.9511 , 0.5416 , 0.836 ,
-0.9899924966004454 , 0.1411200080598672 , 3.0 , 1 , 0.8506 , 0.4096 , 0.5226 ,
-0.4899924966004454 , 0.1411200080598672 , 3.0 , 1 , 0.6267 , 0.6928 , 0.0472 ,
-0.4817022029984541 , 0.19042264736102704 , 2.95 , 1 , 0.3729 , 0.5677 , 0.5398 ,
-0.9528182145943047 , -0.30354151270842933 , 3.45 , 1 , 0.2788 , 0.6264 , 0.5354 ,
-0.4528182145943047 , -0.30354151270842933 , 3.45 , 1 , 0.9977 , 0.627 , 0.6646 ,
-0.9364566872907963 , -0.35078322768961984 , 3.5 , 1 , 0.167 , 0.5763 , 0.4545 ,
-0.9364566872907963 , -0.35078322768961984 , 3.5 , 1 , 0.5161 , 0.6712 , 0.9784 ,
-0.43645668729079634 , -0.35078322768961984 , 3.5 , 1 , 0.8119 , 0.4211 , 0.5188 ,
-0.4528182145943047 , -0.30354151270842933 , 3.45 , 1 , 0.4659 , 0.5398 , 0.6899 ,
-0.6906510965605076 , -0.7231881240865121 , 3.95 , 1 , 0.4978 , 0.6991 , 0.2695 ,
-0.1906510965605076 , -0.7231881240865121 , 3.95 , 1 , 0.783 , 0.4414 , 0.5126 ,
-0.6536436208636119 , -0.7568024953079282 , 4.0 , 1 , 0.4009 , 0.2565 , 0.8667 ,
-0.6536436208636119 , -0.7568024953079282 , 4.0 , 1 , 0.2833 , 0.825 , 0.9537 ,
-0.15364362086361194 , -0.7568024953079282 , 4.0 , 1 , 0.8936 , 0.728 , 0.1477 ,
-0.1906510965605076 , -0.7231881240865121 , 3.95 , 1 , 0.5068 , 0.8913 , 0.3018 ,
-0.2593885027896261 , -0.9657730606206388 , 4.45 , 1 , 0.2974 , 0.106 , 0.419 ,
0.2406114972103739 , -0.9657730606206388 , 4.45 , 1 , 0.4538 , 0.2227 , 0.706 ,
-0.2107957994307797 , -0.977530117665097 , 4.5 , 1 , 0.408 , 0.2551 , 0.202 ,
-0.2107957994307797 , -0.977530117665097 , 4.5 , 1 , 0.6051 , 0.7398 , 0.7856 ,
0.2892042005692203 , -0.977530117665097 , 4.5 , 1 , 0.6001 , 0.1649 , 0.4615 ,
0.2406114972103739 , -0.9657730606206388 , 4.45 , 1 , 0.911 , 0.6849 , 0.8087 ,
0.23538144295445118 , -0.9719030694018208 , 4.95 , 1 , 0.8979 , 0.9512 , 0.2513 ,
0.7353814429544512 , -0.9719030694018208 , 4.95 , 1 , 0.6233 , 0.5221 , 0.0746 ,
0.28366218546322625 , -0.9589242746631385 , 5.0 , 1 , 0.7091 , 0.2616 , 0.5882 ,
0.28366218546322625 , -0.9589242746631385 , 5.0 , 1 , 0.6495 , 0.5482 , 0.0534 ,
0.7836621854632262 , -0.9589242746631385 , 5.0 , 1 , 0.2025 , 0.0253 , 0.1408 ,
0.7353814429544512 , -0.9719030694018208 , 4.95 , 1 , 0.8622 , 0.6372 , 0.7423 ,
0.6725218022484659 , -0.7400773104888944 , 5.45 , 1 , 0.4114 , 0.7164 , 0.5147 ,
1.172521802248466 , -0.7400773104888944 , 5.45 , 1 , 0.0555 , 0.5541 , 0.9635 ,
0.70866977429126 , -0.7055403255703919 , 5.5 , 1 , 0.7637 , 0.106 , 0.6865 ,
0.70866977429126 , -0.7055403255703919 , 5.5 , 1 , 0.6545 , 0.8806 , 0.8624 ,
1.20866977429126 , -0.7055403255703919 , 5.5 , 1 , 0.9975 , 0.6257 , 0.1279 ,
1.172521802248466 , -0.7400773104888944 , 5.45 , 1 , 0.9602 , 0.0149 , 0.7595 ,
0.9450053693342275 , -0.32705481486974064 , 5.95 , 1 , 0.4196 , 0.7042 , 0.0583 ,
1.4450053693342275 , -0.32705481486974064 , 5.95 , 1 , 0.6761 , 0.975 , 0.4089 ,
0.960170286650366 , -0.27941549819892586 , 6.0 , 1 , 0.3976 , 0.0414 , 0.9921 ,
0.960170286650366 , -0.27941549819892586 , 6.0 , 1 , 0.857 , 0.3548 , 0.2678 ,
1.4601702866503659 , -0.27941549819892586 , 6.0 , 1 , 0.9761 , 0.8385 , 0.6537 ,
1.4450053693342275 , -0.32705481486974064 , 5.95 , 1 , 0.9463 , 0.8549 , 0.6464 ,
0.9861186637925126 , 0.1660421058649572 , 6.45 , 1 , 0.3958 , 0.5382 , 0.0833 ,
1.4861186637925126 , 0.1660421058649572 , 6.45 , 1 , 0.5854 , 0.9516 , 0.9302 ,
0.9765876257280235 , 0.21511998808781552 , 6.5 , 1 , 0.1252 , 0.1731 , 0.0114 ,
0.9765876257280235 , 0.21511998808781552 , 6.5 , 1 , 0.0394 , 0.6072 , 0.4129 ,
1.4765876257280235 , 0.21511998808781552 , 6.5 , 1 , 0.2816 , 0.1047 , 0.1379 ,
1.4861186637925126 , 0.1660421058649572 , 6.45 , 1 , 0.4748 , 0.4541 , 0.3762 ,
0.785795717263661 , 0.618486128163024 , 6.95 , 1 , 0.2229 , 0.1539 , 0.1316 ,
1.2857957172636612 , 0.618486128163024 , 6.95 , 1 , 0.194 , 0.4711 , 0.8021 ,
0.7539022543433046 , 0.6569865987187891 , 7.0 , 1 , 0.7938 , 0.0911 , 0.7341 ,
0.7539022543433046 , 0.6569865987187891 , 7.0 , 1 , 0.6328 , 0.7703 , 0.4011 ,
1.2539022543433047 , 0.6569865987187891 , 7.0 , 1 , 0.3373 , 0.0336 , 0.8206 ,
1.2857957172636612 , 0.618486128163024 , 6.95 , 1 , 0.4511 , 0.6269 , 0.4039 ,
0.39308257356494075 , 0.9195031758289707 , 7.45 , 1 , 0.6747 , 0.4348 , 0.0655 ,
0.8930825735649408 , 0.9195031758289707 , 7.45 , 1 , 0.6492 , 0.4944 , 0.336 ,
0.3466353178350258 , 0.9379999767747389 , 7.5 , 1 , 0.4186 , 0.6043 , 0.9243 ,
0.3466353178350258 , 0.9379999767747389 , 7.5 , 1 , 0.0352 , 0.6077 , 0.4045 ,
0.8466353178350259 , 0.9379999767747389 , 7.5 , 1 , 0.6384 , 0.2747 , 0.9849 ,
0.8930825735649408 , 0.9195031758289707 , 7.45 , 1 , 0.9975 , 0.2595 , 0.3776 ,
-0.09587089337649782 , 0.9953937772576199 , 7.95 , 1 , 0.171 , 0.4703 , 0.572 ,
0.4041291066235022 , 0.9953937772576199 , 7.95 , 1 , 0.8468 , 0.1652 , 0.147 ,
-0.14550003380861354 , 0.9893582466233818 , 8.0 , 1 , 0.1179 , 0.4274 , 0.7728 ,
-0.14550003380861354 , 0.9893582466233818 , 8.0 , 1 , 0.6621 , 0.386 , 0.5191 ,
0.35449996619138646 , 0.9893582466233818 , 8.0 , 1 , 0.1099 , 0.8692 , 0.1223 ,
0.4041291066235022 , 0.9953937772576199 , 7.95 , 1 , 0.1404 , 0.4512 , 0.4357 ,
-0.5613518220050729 , 0.827577266441983 , 8.450000000000001 , 1 , 0.6506 , 0.346 , 0.3623 ,
-0.06135182200507294 , 0.827577266441983 , 8.450000000000001 , 1 , 0.3996 , 0.958 , 0.1829 ,
-0.6020119026848236 , 0.7984871126234903 , 8.5 , 1 , 0.3533 , 0.4607 , 0.0177 ,
-0.6020119026848236 , 0.7984871126234903 , 8.5 , 1 , 0.0664 , 0.584 , 0.6903 ,
-0.10201190268482363 , 0.7984871126234903 , 8.5 , 1 , 0.2222 , 0.397 , 0.9916 ,
-0.06135182200507294 , 0.827577266441983 , 8.450000000000001 , 1 , 0.0702 , 0.985 , 0.6711 ,
-0.8893942467775822 , 0.45714097803515424 , 8.950000000000001 , 1 , 0.5226 , 0.8222 , 0.4009 ,
-0.38939424677758216 , 0.45714097803515424 , 8.950000000000001 , 1 , 0.7347 , 0.5874 , 0.8521 ,
-0.9111302618846769 , 0.4121184852417566 , 9.0 , 1 , 0.5071 , 0.8689 , 0.3039 ,
-0.9111302618846769 , 0.4121184852417566 , 9.0 , 1 , 0.4224 , 0.7968 , 0.1476 ,
-0.41113026188467694 , 0.4121184852417566 , 9.0 , 1 , 0.2028 , 0.1371 , 0.8457 ,
-0.38939424677758216 , 0.45714097803515424 , 8.950000000000001 , 1 , 0.9464 , 0.6259 , 0.4846 ,
-0.9996819412301848 , -0.025219365143660497 , 9.450000000000001 , 1 , 0.396 , 0.6069 , 0.7965 ,
-0.49968194123018483 , -0.025219365143660497 , 9.450000000000001 , 1 , 0.9047 , 0.1971 , 0.0358 ,
-0.9971721561963784 , -0.0751511204618093 , 9.5 , 1 , 0.8572 , 0.0581 , 0.0468 ,
-0.9971721561963784 , -0.0751511204618093 , 9.5 , 1 , 0.2699 , 0.42 , 0.7027 ,
-0.49717215619637845 , -0.0751511204618093 , 9.5 , 1 , 0.1935 , 0.0594 , 0.1219 ,
-0.49968194123018483 , -0.025219365143660497 , 9.450000000000001 , 1 , 0.4966 , 0.9482 , 0.0833 ,
]

spiral = [
1.5 , 0.0 , 0.0 , 1 , 0.9265 , 0.3098 , 0.8872 ,
1.4987502603949663 , 0.04997916927067833 , 0.05 , 1 , 0.1971 , 0.4186 , 0.7763 ,
1.4950041652780257 , 0.09983341664682815 , 0.1 , 1 , 0.3042 , 0.8467 , 0.9711 ,
1.4887710779360424 , 0.14943813247359924 , 0.15000000000000002 , 1 , 0.6951 , 0.5663 , 0.0205 ,
1.4800665778412416 , 0.19866933079506122 , 0.2 , 1 , 0.1689 , 0.4785 , 0.7598 ,
1.4689124217106446 , 0.24740395925452294 , 0.25 , 1 , 0.008 , 0.7049 , 0.3028 ,
1.455336489125606 , 0.2955202066613396 , 0.30000000000000004 , 1 , 0.084 , 0.2929 , 0.7796 ,
1.439372712847379 , 0.3428978074554514 , 0.35000000000000003 , 1 , 0.6691 , 0.7352 , 0.8682 ,
1.421060994002885 , 0.3894183423086505 , 0.4 , 1 , 0.6699 , 0.4821 , 0.5574 ,
1.4004471023526768 , 0.43496553411123023 , 0.45 , 1 , 0.0523 , 0.0024 , 0.6034 ,
1.3775825618903728 , 0.479425538604203 , 0.5 , 1 , 0.1384 , 0.9216 , 0.7459 ,
1.3525245220595057 , 0.5226872289306592 , 0.55 , 1 , 0.4146 , 0.0075 , 0.6591 ,
1.3253356149096782 , 0.5646424733950355 , 0.6000000000000001 , 1 , 0.0647 , 0.4397 , 0.7937 ,
1.2960837985490559 , 0.6051864057360395 , 0.65 , 1 , 0.1617 , 0.0627 , 0.9797 ,
1.2648421872844884 , 0.6442176872376911 , 0.7000000000000001 , 1 , 0.3368 , 0.0373 , 0.3069 ,
1.231688868873821 , 0.6816387600233341 , 0.75 , 1 , 0.2875 , 0.4223 , 0.3178 ,
1.1967067093471653 , 0.7173560908995228 , 0.8 , 1 , 0.4332 , 0.9385 , 0.1643 ,
1.159983145884982 , 0.7512804051402927 , 0.8500000000000001 , 1 , 0.7387 , 0.7912 , 0.4524 ,
1.1216099682706644 , 0.7833269096274834 , 0.9 , 1 , 0.117 , 0.079 , 0.9779 ,
1.0816830894638834 , 0.8134155047893737 , 0.9500000000000001 , 1 , 0.516 , 0.3203 , 0.1746 ,
1.0403023058681398 , 0.8414709848078965 , 1.0 , 1 , 0.008 , 0.0369 , 0.5687 ,
0.997571047891727 , 0.867423225594017 , 1.05 , 1 , 0.6224 , 0.2002 , 0.2418 ,
0.9535961214255773 , 0.8912073600614354 , 1.1 , 1 , 0.2423 , 0.2671 , 0.26 ,
0.9084874408841572 , 0.9127639402605211 , 1.1500000000000001 , 1 , 0.5947 , 0.6695 , 0.4113 ,
0.8623577544766734 , 0.9320390859672264 , 1.2000000000000002 , 1 , 0.3134 , 0.0157 , 0.1948 ,
0.8153223623952687 , 0.9489846193555862 , 1.25 , 1 , 0.7419 , 0.5208 , 0.9882 ,
0.7674988286245874 , 0.963558185417193 , 1.3 , 1 , 0.9387 , 0.1397 , 0.7522 ,
0.7190066870930415 , 0.9757233578266591 , 1.35 , 1 , 0.5733 , 0.3271 , 0.1756 ,
0.6699671429002408 , 0.9854497299884603 , 1.4000000000000001 , 1 , 0.4755 , 0.4624 , 0.4839 ,
0.6205027693673664 , 0.9927129910375885 , 1.4500000000000002 , 1 , 0.4701 , 0.1273 , 0.8611 ,
0.5707372016677029 , 0.9974949866040544 , 1.5 , 1 , 0.4763 , 0.7224 , 0.4721 ,
0.5207948278030924 , 0.999783764189357 , 1.55 , 1 , 0.0572 , 0.9144 , 0.0755 ,
0.4708004776987112 , 0.9995736030415051 , 1.6 , 1 , 0.8514 , 0.0284 , 0.0102 ,
0.42087911119326593 , 0.9968650284539189 , 1.6500000000000001 , 1 , 0.1897 , 0.122 , 0.42 ,
0.37115550570447514 , 0.9916648104524686 , 1.7000000000000002 , 1 , 0.7124 , 0.191 , 0.7677 ,
0.3217539443505079 , 0.9839859468739369 , 1.75 , 1 , 0.0529 , 0.1141 , 0.1647 ,
0.2727979053069129 , 0.9738476308781951 , 1.8 , 1 , 0.4221 , 0.1011 , 0.6425 ,
0.22440975317548706 , 0.9612752029752999 , 1.85 , 1 , 0.5402 , 0.9431 , 0.3952 ,
0.17671043313649643 , 0.9463000876874145 , 1.9000000000000001 , 1 , 0.1941 , 0.9571 , 0.8331 ,
0.1298191686487129 , 0.9289597150038692 , 1.9500000000000002 , 1 , 0.483 , 0.1944 , 0.8213 ,
0.0838531634528576 , 0.9092974268256817 , 2.0 , 1 , 0.3261 , 0.9254 , 0.7642 ,
0.03892730862328686 , 0.8873623686333753 , 2.0500000000000003 , 1 , 0.6388 , 0.681 , 0.5244 ,
-0.00484610459985757 , 0.8632093666488737 , 2.1 , 1 , 0.7877 , 0.4299 , 0.8931 ,
-0.04735766548027098 , 0.8368987907984977 , 2.15 , 1 , 0.8188 , 0.4546 , 0.7164 ,
-0.08850111725534582 , 0.8084964038195901 , 2.2 , 1 , 0.7103 , 0.5822 , 0.1675 ,
-0.12817362272273913 , 0.7780731968879212 , 2.25 , 1 , 0.9508 , 0.1539 , 0.1496 ,
-0.16627602127982444 , 0.74570521217672 , 2.3000000000000003 , 1 , 0.9163 , 0.8948 , 0.5466 ,
-0.202713076773554 , 0.7114733527908443 , 2.35 , 1 , 0.519 , 0.5522 , 0.5041 ,
-0.23739371554124578 , 0.6754631805511506 , 2.4000000000000004 , 1 , 0.7687 , 0.8767 , 0.0953 ,
-0.2702312540473074 , 0.6377647021345036 , 2.45 , 1 , 0.7291 , 0.5451 , 0.5915 ,
-0.3011436155469337 , 0.5984721441039565 , 2.5 , 1 , 0.326 , 0.3817 , 0.2885 ,
-0.3300535352352224 , 0.5576837173914166 , 2.5500000000000003 , 1 , 0.1253 , 0.5609 , 0.8711 ,
-0.3568887533689473 , 0.5155013718214642 , 2.6 , 1 , 0.0499 , 0.4245 , 0.6204 ,
-0.3815821958782861 , 0.47203054128988226 , 2.6500000000000004 , 1 , 0.1001 , 0.3124 , 0.9255 ,
-0.4040721420170612 , 0.4273798802338298 , 2.7 , 1 , 0.9789 , 0.5908 , 0.9248 ,
-0.42430237863246356 , 0.38166099205233167 , 2.75 , 1 , 0.8453 , 0.8594 , 0.9818 ,
-0.4422223406686583 , 0.33498815015590466 , 2.8000000000000003 , 1 , 0.6857 , 0.5459 , 0.5141 ,
-0.45778723755309036 , 0.2874780123425444 , 2.85 , 1 , 0.7313 , 0.5346 , 0.4151 ,
-0.47095816514959066 , 0.23924932921398198 , 2.9000000000000004 , 1 , 0.637 , 0.8708 , 0.9102 ,
-0.4817022029984541 , 0.19042264736102704 , 2.95 , 1 , 0.1963 , 0.2184 , 0.6111 ,
-0.4899924966004454 , 0.1411200080598672 , 3.0 , 1 , 0.5036 , 0.3229 , 0.6046 ,
-0.4958083245390612 , 0.09146464223243675 , 3.0500000000000003 , 1 , 0.9075 , 0.077 , 0.8782 ,
-0.4991351502732795 , 0.04158066243329049 , 3.1 , 1 , 0.5103 , 0.9486 , 0.6901 ,
-0.49996465847134197 , -0.008407247367149063 , 3.1500000000000004 , 1 , 0.2719 , 0.2787 , 0.8342 ,
-0.4982947757947531 , -0.058374143427580086 , 3.2 , 1 , 0.1138 , 0.156 , 0.9393 ,
-0.49412967608054625 , -0.10819513453010837 , 3.25 , 1 , 0.9346 , 0.5602 , 0.955 ,
-0.4874797699088649 , -0.15774569414324865 , 3.3000000000000003 , 1 , 0.83 , 0.2749 , 0.6877 ,
-0.4783616785819341 , -0.20690197167339977 , 3.35 , 1 , 0.5989 , 0.4955 , 0.6131 ,
-0.46679819257946087 , -0.25554110202683167 , 3.4000000000000004 , 1 , 0.6237 , 0.3393 , 0.4697 ,
-0.4528182145943047 , -0.30354151270842933 , 3.45 , 1 , 0.1287 , 0.8995 , 0.8602 ,
-0.43645668729079634 , -0.35078322768961984 , 3.5 , 1 , 0.2058 , 0.028 , 0.5113 ,
-0.41775450596627584 , -0.3971481672859602 , 3.5500000000000003 , 1 , 0.1661 , 0.3703 , 0.3043 ,
-0.396758416334147 , -0.44252044329485246 , 3.6 , 1 , 0.1834 , 0.7549 , 0.878 ,
-0.3735208976839377 , -0.48678664865569976 , 3.6500000000000004 , 1 , 0.4295 , 0.4682 , 0.8109 ,
-0.34810003171040804 , -0.5298361409084934 , 3.7 , 1 , 0.8803 , 0.6951 , 0.5387 ,
-0.32055935733956076 , -0.5715613187423437 , 3.75 , 1 , 0.2302 , 0.0522 , 0.2317 ,
-0.2909677119144165 , -0.6118578909427193 , 3.8000000000000003 , 1 , 0.0144 , 0.2661 , 0.3426 ,
-0.2593990591375078 , -0.6506251370651673 , 3.85 , 1 , 0.0493 , 0.9741 , 0.279 ,
-0.22593230420013988 , -0.6877661591839741 , 3.9000000000000004 , 1 , 0.1059 , 0.1576 , 0.2997 ,
-0.1906510965605076 , -0.7231881240865121 , 3.95 , 1 , 0.612 , 0.5641 , 0.0567 ,
-0.15364362086361194 , -0.7568024953079282 , 4.0 , 1 , 0.638 , 0.1542 , 0.6922 ,
-0.11500237652557443 , -0.788525254426195 , 4.05 , 1 , 0.1915 , 0.6746 , 0.2885 ,
-0.07482394653326851 , -0.8182771110644108 , 4.1000000000000005 , 1 , 0.1128 , 0.752 , 0.2692 ,
-0.03320875603715434 , -0.8459837010754465 , 4.15 , 1 , 0.0455 , 0.6367 , 0.7956 ,
0.009739178659300574 , -0.8715757724135882 , 4.2 , 1 , 0.9526 , 0.6335 , 0.9799 ,
0.05391251008620718 , -0.8949893582285835 , 4.25 , 1 , 0.766 , 0.1127 , 0.4948 ,
0.09920082792002455 , -0.9161659367494549 , 4.3 , 1 , 0.3951 , 0.8493 , 0.0139 ,
0.14549093495186888 , -0.9350525775584494 , 4.3500000000000005 , 1 , 0.0941 , 0.4038 , 0.9077 ,
0.19266713002158065 , -0.951602073889516 , 4.4 , 1 , 0.2372 , 0.0893 , 0.0787 ,
0.2406114972103739 , -0.9657730606206388 , 4.45 , 1 , 0.742 , 0.5484 , 0.9337 ,
0.2892042005692203 , -0.977530117665097 , 4.5 , 1 , 0.8186 , 0.3475 , 0.5795 ,
0.3383237836463135 , -0.9868438585032365 , 4.55 , 1 , 0.8818 , 0.3662 , 0.8002 ,
0.38784747306494605 , -0.9936910036334645 , 4.6000000000000005 , 1 , 0.7838 , 0.6548 , 0.1996 ,
0.43765148539300835 , -0.9980544387588794 , 4.65 , 1 , 0.9257 , 0.6522 , 0.7608 ,
0.4876113365371094 , -0.9999232575641008 , 4.7 , 1 , 0.0385 , 0.3165 , 0.9172 ,
0.5376021528879765 , -0.999292788975378 , 4.75 , 1 , 0.804 , 0.2872 , 0.7113 ,
0.5874989834394473 , -0.9961646088358406 , 4.800000000000001 , 1 , 0.6965 , 0.4139 , 0.917 ,
0.6371771121009082 , -0.9905465359667132 , 4.8500000000000005 , 1 , 0.6748 , 0.715 , 0.5808 ,
0.6865123694225758 , -0.9824526126243325 , 4.9 , 1 , 0.282 , 0.971 , 0.8603 ,
0.7353814429544512 , -0.9719030694018208 , 4.95 , 1 , 0.4659 , 0.6922 , 0.5384 ,
0.7836621854632262 , -0.9589242746631385 , 5.0 , 1 , 0.2166 , 0.012 , 0.8624 ,
0.8312339202367545 , -0.9435486686359064 , 5.050000000000001 , 1 , 0.5167 , 0.138 , 0.6689 ,
0.8779777427129811 , -0.9258146823277321 , 5.1000000000000005 , 1 , 0.4213 , 0.7146 , 0.0363 ,
0.9237768176794282 , -0.9057666414687044 , 5.15 , 1 , 0.8063 , 0.0431 , 0.2552 ,
0.9685166713003771 , -0.8834546557201531 , 5.2 , 1 , 0.2986 , 0.7479 , 0.2911 ,
1.0120854772418406 , -0.858934493426592 , 5.25 , 1 , 0.9535 , 0.1822 , 0.5995 ,
1.0543743361791615 , -0.8322674422239008 , 5.300000000000001 , 1 , 0.3229 , 0.7419 , 0.6215 ,
1.0952775479886068 , -0.8035201558521553 , 5.3500000000000005 , 1 , 0.9458 , 0.323 , 0.914 ,
1.1346928759426347 , -0.7727644875559871 , 5.4 , 1 , 0.1047 , 0.5964 , 0.2196 ,
1.172521802248466 , -0.7400773104888944 , 5.45 , 1 , 0.5247 , 0.0955 , 0.9954 ,
1.20866977429126 , -0.7055403255703919 , 5.5 , 1 , 0.308 , 0.368 , 0.2297 ,
1.2430464409664106 , -0.6692398572762613 , 5.550000000000001 , 1 , 0.9197 , 0.0891 , 0.72 ,
1.2755658785102502 , -0.6312666378723208 , 5.6000000000000005 , 1 , 0.5356 , 0.8541 , 0.0233 ,
1.3061468052647158 , -0.5917155806310094 , 5.65 , 1 , 0.0328 , 0.963 , 0.9482 ,
1.3347127848391598 , -0.5506855425976376 , 5.7 , 1 , 0.3505 , 0.0294 , 0.6319 ,
1.3611924171615208 , -0.5082790774992584 , 5.75 , 1 , 0.8131 , 0.7769 , 0.0222 ,
1.3855195169413195 , -0.4646021794137566 , 5.800000000000001 , 1 , 0.2473 , 0.7032 , 0.6886 ,
1.4076332790984134 , -0.4197640178398589 , 5.8500000000000005 , 1 , 0.9354 , 0.3294 , 0.0001 ,
1.4274784307440358 , -0.373876664830236 , 5.9 , 1 , 0.8122 , 0.4079 , 0.6336 ,
1.4450053693342275 , -0.32705481486974064 , 5.95 , 1 , 0.2945 , 0.9649 , 0.6367 ,
1.4601702866503659 , -0.27941549819892586 , 6.0 , 1 , 0.9619 , 0.9963 , 0.6429 ,
1.4729352782968976 , -0.23107778829939138 , 6.050000000000001 , 1 , 0.2529 , 0.9367 , 0.964 ,
1.4832684384425847 , -0.18216250427209502 , 6.1000000000000005 , 1 , 0.2908 , 0.5701 , 0.2117 ,
1.491143939568469 , -0.13279190885251674 , 6.15 , 1 , 0.7015 , 0.0715 , 0.3194 ,
1.4965420970232175 , -0.0830894028174964 , 6.2 , 1 , 0.437 , 0.0657 , 0.2316 ,
1.4994494182244993 , -0.03317921654755682 , 6.25 , 1 , 0.3328 , 0.3689 , 0.0154 ,
1.499858636383415 , 0.0168139004843506 , 6.300000000000001 , 1 , 0.496 , 0.5146 , 0.1176 ,
1.4977687286676842 , 0.06676499152155635 , 6.3500000000000005 , 1 , 0.0354 , 0.1414 , 0.8796 ,
1.4931849187581925 , 0.11654920485049364 , 6.4 , 1 , 0.2813 , 0.5644 , 0.6813 ,
1.4861186637925126 , 0.1660421058649572 , 6.45 , 1 , 0.4659 , 0.9523 , 0.3134 ,
1.4765876257280235 , 0.21511998808781552 , 6.5 , 1 , 0.9809 , 0.1158 , 0.9094 ,
1.4646156271962179 , 0.2636601823727792 , 6.550000000000001 , 1 , 0.9286 , 0.197 , 0.9921 ,
1.4502325919585293 , 0.3115413635133787 , 6.6000000000000005 , 1 , 0.0935 , 0.6614 , 0.417 ,
1.433474470112512 , 0.35864385349280037 , 6.65 , 1 , 0.5135 , 0.6484 , 0.7691 ,
1.4143831482353195 , 0.4048499206165983 , 6.7 , 1 , 0.677 , 0.133 , 0.9884 ,
1.3930063446890766 , 0.4500440737806176 , 6.75 , 1 , 0.1235 , 0.1994 , 0.4992 ,
1.369397490349825 , 0.49411335113860894 , 6.800000000000001 , 1 , 0.9874 , 0.9252 , 0.5883 ,
1.343615595058159 , 0.5369476024480118 , 6.8500000000000005 , 1 , 0.0211 , 0.6647 , 0.7823 ,
1.315725100125357 , 0.5784397643882001 , 6.9 , 1 , 0.63 , 0.1747 , 0.3362 ,
1.2857957172636612 , 0.618486128163024 , 6.95 , 1 , 0.7954 , 0.6511 , 0.3845 ,
1.2539022543433047 , 0.6569865987187891 , 7.0 , 1 , 0.6423 , 0.3636 , 0.9729 ,
1.2201244284117934 , 0.6938449449297643 , 7.050000000000001 , 1 , 0.0851 , 0.3689 , 0.5754 ,
1.184546666442806 , 0.7289690401258765 , 7.1000000000000005 , 1 , 0.9493 , 0.8626 , 0.0556 ,
1.1472578943127236 , 0.7622710923614112 , 7.15 , 1 , 0.4375 , 0.0113 , 0.9525 ,
1.1083513145322546 , 0.7936678638491531 , 7.2 , 1 , 0.8861 , 0.4544 , 0.4334 ,
1.0679241732886948 , 0.8230808790115055 , 7.25 , 1 , 0.2611 , 0.5372 , 0.3517 ,
1.0260775173811045 , 0.8504366206285648 , 7.300000000000001 , 1 , 0.0588 , 0.3022 , 0.0381 ,
0.982915941655937 , 0.8756667135928826 , 7.3500000000000005 , 1 , 0.1952 , 0.1275 , 0.7287 ,
0.9385473275743903 , 0.8987080958116269 , 7.4 , 1 , 0.7386 , 0.7073 , 0.3628 ,
0.8930825735649408 , 0.9195031758289707 , 7.45 , 1 , 0.9107 , 0.9013 , 0.0062 ,
0.8466353178350259 , 0.9379999767747389 , 7.5 , 1 , 0.7185 , 0.1111 , 0.5785 ,
0.7993216543347061 , 0.9541522662795151 , 7.550000000000001 , 1 , 0.4324 , 0.7014 , 0.2473 ,
0.7512598425822549 , 0.9679196720314865 , 7.6000000000000005 , 1 , 0.3447 , 0.1325 , 0.8529 ,
0.7025700120769444 , 0.9792677826862 , 7.65 , 1 , 0.1888 , 0.5917 , 0.3717 ,
0.6533738620378644 , 0.9881682338770004 , 7.7 , 1 , 0.6308 , 0.1379 , 0.2915 ,
0.603794357219253 , 0.9945987791111761 , 7.75 , 1 , 0.6612 , 0.332 , 0.537 ,
0.5539554205626489 , 0.998543345374605 , 7.800000000000001 , 1 , 0.8083 , 0.4298 , 0.3545 ,
0.5039816234540788 , 0.9999920733059188 , 7.8500000000000005 , 1 , 0.8438 , 0.2383 , 0.3807 ,
0.45399787436046307 , 0.998941341839772 , 7.9 , 1 , 0.844 , 0.2006 , 0.673 ,
0.4041291066235022 , 0.9953937772576199 , 7.95 , 1 , 0.5709 , 0.8007 , 0.1732 ,
0.35449996619138646 , 0.9893582466233818 , 8.0 , 1 , 0.2207 , 0.7915 , 0.2628 ,
0.3052345000688387 , 0.9808498356203995 , 8.05 , 1 , 0.9694 , 0.8313 , 0.2116 ,
0.2564558462642089 , 0.9698898108450863 , 8.1 , 1 , 0.8013 , 0.9538 , 0.8372 ,
0.20828592600857349 , 0.9565055666515091 , 8.15 , 1 , 0.1598 , 0.1488 , 0.227 ,
0.16084513901616376 , 0.9407305566797726 , 8.200000000000001 , 1 , 0.1668 , 0.1645 , 0.3933 ,
0.1142520625477782 , 0.9226042102393402 , 8.25 , 1 , 0.785 , 0.3409 , 0.1708 ,
0.06862315502937921 , 0.9021718337562933 , 8.3 , 1 , 0.8662 , 0.3806 , 0.7492 ,
0.024072464966690355 , 0.8794844975308649 , 8.35 , 1 , 0.1904 , 0.5385 , 0.7795 ,
-0.019288654116685566 , 0.8545989080882804 , 8.4 , 1 , 0.4241 , 0.9293 , 0.2011 ,
-0.06135182200507294 , 0.827577266441983 , 8.450000000000001 , 1 , 0.2183 , 0.4139 , 0.2963 ,
-0.10201190268482363 , 0.7984871126234903 , 8.5 , 1 , 0.546 , 0.2379 , 0.6462 ,
-0.14116726712960181 , 0.7674011568674873 , 8.55 , 1 , 0.8622 , 0.9351 , 0.384 ,
-0.17872004732001245 , 0.7343970978741133 , 8.6 , 1 , 0.5057 , 0.0875 , 0.1307 ,
-0.21457638086269193 , 0.699557428602668 , 8.65 , 1 , 0.2322 , 0.3439 , 0.9104 ,
-0.2486466455973999 , 0.662969230082182 , 8.700000000000001 , 1 , 0.7281 , 0.1424 , 0.5773 ,
-0.28084568360574913 , 0.6247239537541924 , 8.75 , 1 , 0.7448 , 0.8739 , 0.7737 ,
-0.311093014061656 , 0.5849171928917617 , 8.8 , 1 , 0.0707 , 0.1873 , 0.4482 ,
-0.33931303439148375 , 0.5436484436660883 , 8.85 , 1 , 0.6303 , 0.9812 , 0.4468 ,
-0.3654352092411123 , 0.5010208564578846 , 8.9 , 1 , 0.9116 , 0.9842 , 0.1319 ,
-0.38939424677758216 , 0.45714097803515424 , 8.950000000000001 , 1 , 0.5314 , 0.3745 , 0.5783 ,
-0.41113026188467694 , 0.4121184852417566 , 9.0 , 1 , 0.1494 , 0.1196 , 0.7482 ,
-0.43058892584452846 , 0.366065910862411 , 9.05 , 1 , 0.5183 , 0.6534 , 0.3999 ,
-0.4477216021311119 , 0.3190983623493521 , 9.1 , 1 , 0.8615 , 0.5172 , 0.4123 ,
-0.46248546797623735 , 0.27133323411363275 , 9.15 , 1 , 0.2084 , 0.3616 , 0.2112 ,
-0.47484362140416403 , 0.22288991410024592 , 9.200000000000001 , 1 , 0.0032 , 0.1227 , 0.8892 ,
-0.4847651734673236 , 0.17388948538043356 , 9.25 , 1 , 0.1675 , 0.8084 , 0.4918 ,
-0.49222532545260345 , 0.1244544235070617 , 9.3 , 1 , 0.8871 , 0.1054 , 0.9421 ,
-0.49720543086521196 , 0.07470829038953478 , 9.35 , 1 , 0.7742 , 0.2817 , 0.8262 ,
-0.4996930420352065 , 0.024775425453357765 , 9.4 , 1 , 0.8588 , 0.4125 , 0.8671 ,
-0.49968194123018483 , -0.025219365143660497 , 9.450000000000001 , 1 , 0.7057 , 0.2416 , 0.6202 ,
-0.49717215619637845 , -0.0751511204618093 , 9.5 , 1 , 0.5658 , 0.4618 , 0.8915 ,
-0.4921699600893009 , -0.12489503711675232 , 9.55 , 1 , 0.8882 , 0.1909 , 0.8223 ,
-0.48468785579412665 , -0.1743267812229814 , 9.600000000000001 , 1 , 0.081 , 0.4106 , 0.8884 ,
-0.4747445446749893 , -0.2233227991637839 , 9.65 , 1 , 0.8474 , 0.5406 , 0.9597 ,
-0.4623648798313097 , -0.2717606264109442 , 9.700000000000001 , 1 , 0.4434 , 0.7141 , 0.7593 ,
-0.44757980397799324 , -0.31951919362227366 , 9.75 , 1 , 0.9052 , 0.339 , 0.1339 ,
-0.43042627210475326 , -0.3664791292519284 , 9.8 , 1 , 0.3783 , 0.1906 , 0.4305 ,
-0.4109471591078868 , -0.4125230579170943 , 9.850000000000001 , 1 , 0.5418 , 0.5044 , 0.4721 ,
-0.38919115262536086 , -0.45753589377532133 , 9.9 , 1 , 0.8762 , 0.2283 , 0.4672 ,
-0.36521263134307114 , -0.5014051281791989 , 9.950000000000001 , 1 , 0.7474 , 0.1923 , 0.1205 ,
]

spiral2 = [
	1.0 , 0.0 , 0.0 , 1 , 0.2427 , 0.7589 , 0.3217 ,
0.9987502603949663 , 0.04997916927067833 , 0.05 , 1 , 0.2525 , 0.5095 , 0.3183 ,
0.9950041652780258 , 0.09983341664682815 , 0.1 , 1 , 0.8409 , 0.1363 , 0.6365 ,
0.9887710779360422 , 0.14943813247359924 , 0.15000000000000002 , 1 , 0.7107 , 0.4099 , 0.97 ,
0.9800665778412416 , 0.19866933079506122 , 0.2 , 1 , 0.8521 , 0.9629 , 0.6986 ,
0.9689124217106447 , 0.24740395925452294 , 0.25 , 1 , 0.1612 , 0.1775 , 0.88 ,
0.955336489125606 , 0.2955202066613396 , 0.30000000000000004 , 1 , 0.991 , 0.1607 , 0.0023 ,
0.9393727128473789 , 0.3428978074554514 , 0.35000000000000003 , 1 , 0.603 , 0.3541 , 0.4851 ,
0.9210609940028851 , 0.3894183423086505 , 0.4 , 1 , 0.9901 , 0.5042 , 0.1701 ,
0.9004471023526769 , 0.43496553411123023 , 0.45 , 1 , 0.479 , 0.8208 , 0.6254 ,
0.8775825618903728 , 0.479425538604203 , 0.5 , 1 , 0.9178 , 0.6884 , 0.5134 ,
0.8525245220595057 , 0.5226872289306592 , 0.55 , 1 , 0.0889 , 0.1154 , 0.8733 ,
0.8253356149096782 , 0.5646424733950355 , 0.6000000000000001 , 1 , 0.5884 , 0.9037 , 0.6433 ,
0.7960837985490559 , 0.6051864057360395 , 0.65 , 1 , 0.0397 , 0.0348 , 0.5329 ,
0.7648421872844884 , 0.6442176872376911 , 0.7000000000000001 , 1 , 0.1113 , 0.4838 , 0.1005 ,
0.7316888688738209 , 0.6816387600233341 , 0.75 , 1 , 0.4395 , 0.3816 , 0.9034 ,
0.6967067093471654 , 0.7173560908995228 , 0.8 , 1 , 0.2174 , 0.3632 , 0.8685 ,
0.6599831458849821 , 0.7512804051402927 , 0.8500000000000001 , 1 , 0.4673 , 0.6357 , 0.0875 ,
0.6216099682706644 , 0.7833269096274834 , 0.9 , 1 , 0.1889 , 0.2927 , 0.7338 ,
0.5816830894638835 , 0.8134155047893737 , 0.9500000000000001 , 1 , 0.4942 , 0.6193 , 0.4667 ,
0.5403023058681398 , 0.8414709848078965 , 1.0 , 1 , 0.1415 , 0.4011 , 0.1813 ,
0.49757104789172696 , 0.867423225594017 , 1.05 , 1 , 0.9925 , 0.9234 , 0.9864 ,
0.4535961214255773 , 0.8912073600614354 , 1.1 , 1 , 0.6161 , 0.0198 , 0.3139 ,
0.40848744088415717 , 0.9127639402605211 , 1.1500000000000001 , 1 , 0.2188 , 0.3063 , 0.2193 ,
0.3623577544766734 , 0.9320390859672264 , 1.2000000000000002 , 1 , 0.6395 , 0.6713 , 0.3093 ,
0.3153223623952687 , 0.9489846193555862 , 1.25 , 1 , 0.051 , 0.3502 , 0.7457 ,
0.26749882862458735 , 0.963558185417193 , 1.3 , 1 , 0.9688 , 0.3131 , 0.9456 ,
0.2190066870930415 , 0.9757233578266591 , 1.35 , 1 , 0.1053 , 0.6807 , 0.8333 ,
0.16996714290024081 , 0.9854497299884603 , 1.4000000000000001 , 1 , 0.4659 , 0.2132 , 0.1467 ,
0.1205027693673664 , 0.9927129910375885 , 1.4500000000000002 , 1 , 0.4883 , 0.1086 , 0.7176 ,
0.0707372016677029 , 0.9974949866040544 , 1.5 , 1 , 0.923 , 0.0907 , 0.1122 ,
0.020794827803092428 , 0.999783764189357 , 1.55 , 1 , 0.3692 , 0.5904 , 0.5104 ,
-0.029199522301288815 , 0.9995736030415051 , 1.6 , 1 , 0.9057 , 0.8153 , 0.0217 ,
-0.07912088880673408 , 0.9968650284539189 , 1.6500000000000001 , 1 , 0.5015 , 0.8552 , 0.24 ,
-0.12884449429552486 , 0.9916648104524686 , 1.7000000000000002 , 1 , 0.3283 , 0.1127 , 0.2565 ,
-0.17824605564949209 , 0.9839859468739369 , 1.75 , 1 , 0.8154 , 0.1798 , 0.3687 ,
-0.2272020946930871 , 0.9738476308781951 , 1.8 , 1 , 0.1281 , 0.4824 , 0.4831 ,
-0.27559024682451294 , 0.9612752029752999 , 1.85 , 1 , 0.7418 , 0.4338 , 0.9748 ,
-0.3232895668635036 , 0.9463000876874145 , 1.9000000000000001 , 1 , 0.4036 , 0.6291 , 0.3479 ,
-0.3701808313512871 , 0.9289597150038692 , 1.9500000000000002 , 1 , 0.7553 , 0.5463 , 0.9029 ,
-0.4161468365471424 , 0.9092974268256817 , 2.0 , 1 , 0.8013 , 0.6829 , 0.6387 ,
-0.46107269137671314 , 0.8873623686333753 , 2.0500000000000003 , 1 , 0.5658 , 0.3358 , 0.5468 ,
-0.5048461045998576 , 0.8632093666488737 , 2.1 , 1 , 0.5934 , 0.3018 , 0.7274 ,
-0.547357665480271 , 0.8368987907984977 , 2.15 , 1 , 0.5538 , 0.1359 , 0.992 ,
-0.5885011172553458 , 0.8084964038195901 , 2.2 , 1 , 0.1611 , 0.4289 , 0.3769 ,
-0.6281736227227391 , 0.7780731968879212 , 2.25 , 1 , 0.0831 , 0.6786 , 0.1072 ,
-0.6662760212798244 , 0.74570521217672 , 2.3000000000000003 , 1 , 0.3854 , 0.2971 , 0.0987 ,
-0.702713076773554 , 0.7114733527908443 , 2.35 , 1 , 0.4519 , 0.334 , 0.0865 ,
-0.7373937155412458 , 0.6754631805511506 , 2.4000000000000004 , 1 , 0.781 , 0.0723 , 0.7352 ,
-0.7702312540473074 , 0.6377647021345036 , 2.45 , 1 , 0.1502 , 0.3371 , 0.3078 ,
-0.8011436155469337 , 0.5984721441039565 , 2.5 , 1 , 0.8671 , 0.0193 , 0.7815 ,
-0.8300535352352224 , 0.5576837173914166 , 2.5500000000000003 , 1 , 0.2646 , 0.9433 , 0.9212 ,
-0.8568887533689473 , 0.5155013718214642 , 2.6 , 1 , 0.5763 , 0.0373 , 0.7804 ,
-0.8815821958782861 , 0.47203054128988226 , 2.6500000000000004 , 1 , 0.4594 , 0.216 , 0.2762 ,
-0.9040721420170612 , 0.4273798802338298 , 2.7 , 1 , 0.8524 , 0.6478 , 0.9141 ,
-0.9243023786324636 , 0.38166099205233167 , 2.75 , 1 , 0.4005 , 0.312 , 0.0005 ,
-0.9422223406686583 , 0.33498815015590466 , 2.8000000000000003 , 1 , 0.3564 , 0.9808 , 0.8336 ,
-0.9577872375530904 , 0.2874780123425444 , 2.85 , 1 , 0.3752 , 0.8358 , 0.9699 ,
-0.9709581651495907 , 0.23924932921398198 , 2.9000000000000004 , 1 , 0.5822 , 0.7962 , 0.5354 ,
-0.9817022029984541 , 0.19042264736102704 , 2.95 , 1 , 0.5994 , 0.407 , 0.3769 ,
-0.9899924966004454 , 0.1411200080598672 , 3.0 , 1 , 0.8513 , 0.1138 , 0.7515 ,
-0.9958083245390612 , 0.09146464223243675 , 3.0500000000000003 , 1 , 0.3152 , 0.9074 , 0.2168 ,
-0.9991351502732795 , 0.04158066243329049 , 3.1 , 1 , 0.4868 , 0.0837 , 0.0469 ,
-0.999964658471342 , -0.008407247367149063 , 3.1500000000000004 , 1 , 0.6805 , 0.1383 , 0.9073 ,
-0.9982947757947531 , -0.058374143427580086 , 3.2 , 1 , 0.621 , 0.429 , 0.7919 ,
-0.9941296760805463 , -0.10819513453010837 , 3.25 , 1 , 0.5341 , 0.2761 , 0.7917 ,
-0.9874797699088649 , -0.15774569414324865 , 3.3000000000000003 , 1 , 0.7472 , 0.3976 , 0.4971 ,
-0.9783616785819341 , -0.20690197167339977 , 3.35 , 1 , 0.643 , 0.6254 , 0.3655 ,
-0.9667981925794609 , -0.25554110202683167 , 3.4000000000000004 , 1 , 0.2257 , 0.9287 , 0.3055 ,
-0.9528182145943047 , -0.30354151270842933 , 3.45 , 1 , 0.0501 , 0.3969 , 0.2569 ,
-0.9364566872907963 , -0.35078322768961984 , 3.5 , 1 , 0.2594 , 0.8027 , 0.0193 ,
-0.9177545059662758 , -0.3971481672859602 , 3.5500000000000003 , 1 , 0.7289 , 0.1234 , 0.8572 ,
-0.896758416334147 , -0.44252044329485246 , 3.6 , 1 , 0.952 , 0.1356 , 0.6909 ,
-0.8735208976839377 , -0.48678664865569976 , 3.6500000000000004 , 1 , 0.2163 , 0.4064 , 0.6135 ,
-0.848100031710408 , -0.5298361409084934 , 3.7 , 1 , 0.3304 , 0.9041 , 0.7408 ,
-0.8205593573395608 , -0.5715613187423437 , 3.75 , 1 , 0.7162 , 0.6659 , 0.4893 ,
-0.7909677119144165 , -0.6118578909427193 , 3.8000000000000003 , 1 , 0.4722 , 0.0272 , 0.2482 ,
-0.7593990591375078 , -0.6506251370651673 , 3.85 , 1 , 0.2433 , 0.0129 , 0.1196 ,
-0.7259323042001399 , -0.6877661591839741 , 3.9000000000000004 , 1 , 0.6329 , 0.1532 , 0.2433 ,
-0.6906510965605076 , -0.7231881240865121 , 3.95 , 1 , 0.8601 , 0.5659 , 0.8879 ,
-0.6536436208636119 , -0.7568024953079282 , 4.0 , 1 , 0.4426 , 0.776 , 0.632 ,
-0.6150023765255744 , -0.788525254426195 , 4.05 , 1 , 0.1354 , 0.8026 , 0.6381 ,
-0.5748239465332685 , -0.8182771110644108 , 4.1000000000000005 , 1 , 0.11 , 0.7241 , 0.8597 ,
-0.5332087560371543 , -0.8459837010754465 , 4.15 , 1 , 0.1906 , 0.4498 , 0.6446 ,
-0.4902608213406994 , -0.8715757724135882 , 4.2 , 1 , 0.891 , 0.4615 , 0.6945 ,
-0.4460874899137928 , -0.8949893582285835 , 4.25 , 1 , 0.4143 , 0.2203 , 0.3089 ,
-0.40079917207997545 , -0.9161659367494549 , 4.3 , 1 , 0.5151 , 0.6747 , 0.5484 ,
-0.3545090650481311 , -0.9350525775584494 , 4.3500000000000005 , 1 , 0.0002 , 0.9299 , 0.9523 ,
-0.30733286997841935 , -0.951602073889516 , 4.4 , 1 , 0.3927 , 0.2675 , 0.2058 ,
-0.2593885027896261 , -0.9657730606206388 , 4.45 , 1 , 0.3254 , 0.7618 , 0.4052 ,
-0.2107957994307797 , -0.977530117665097 , 4.5 , 1 , 0.4922 , 0.334 , 0.4753 ,
-0.1616762163536865 , -0.9868438585032365 , 4.55 , 1 , 0.6011 , 0.2132 , 0.5781 ,
-0.11215252693505398 , -0.9936910036334645 , 4.6000000000000005 , 1 , 0.968 , 0.6267 , 0.783 ,
-0.06234851460699166 , -0.9980544387588794 , 4.65 , 1 , 0.8111 , 0.4555 , 0.409 ,
-0.01238866346289056 , -0.9999232575641008 , 4.7 , 1 , 0.3395 , 0.2661 , 0.8534 ,
0.03760215288797655 , -0.999292788975378 , 4.75 , 1 , 0.2111 , 0.2591 , 0.8982 ,
0.08749898343944727 , -0.9961646088358406 , 4.800000000000001 , 1 , 0.4474 , 0.9235 , 0.9397 ,
0.13717711210090816 , -0.9905465359667132 , 4.8500000000000005 , 1 , 0.3775 , 0.1192 , 0.5044 ,
0.18651236942257576 , -0.9824526126243325 , 4.9 , 1 , 0.2123 , 0.7074 , 0.1253 ,
0.23538144295445118 , -0.9719030694018208 , 4.95 , 1 , 0.9546 , 0.7496 , 0.7355 ,
0.28366218546322625 , -0.9589242746631385 , 5.0 , 1 , 0.8088 , 0.1508 , 0.5429 ,
0.3312339202367545 , -0.9435486686359064 , 5.050000000000001 , 1 , 0.6428 , 0.4109 , 0.7079 ,
0.37797774271298107 , -0.9258146823277321 , 5.1000000000000005 , 1 , 0.8612 , 0.0066 , 0.2711 ,
0.4237768176794282 , -0.9057666414687044 , 5.15 , 1 , 0.0448 , 0.9056 , 0.6468 ,
0.4685166713003771 , -0.8834546557201531 , 5.2 , 1 , 0.916 , 0.75 , 0.8343 ,
0.5120854772418407 , -0.858934493426592 , 5.25 , 1 , 0.8127 , 0.6413 , 0.3024 ,
0.5543743361791615 , -0.8322674422239008 , 5.300000000000001 , 1 , 0.615 , 0.8692 , 0.3372 ,
0.5952775479886068 , -0.8035201558521553 , 5.3500000000000005 , 1 , 0.9156 , 0.5292 , 0.3334 ,
0.6346928759426347 , -0.7727644875559871 , 5.4 , 1 , 0.7294 , 0.3266 , 0.2318 ,
0.6725218022484659 , -0.7400773104888944 , 5.45 , 1 , 0.5963 , 0.8619 , 0.9506 ,
0.70866977429126 , -0.7055403255703919 , 5.5 , 1 , 0.9845 , 0.2582 , 0.2184 ,
0.7430464409664105 , -0.6692398572762613 , 5.550000000000001 , 1 , 0.5196 , 0.5064 , 0.8321 ,
0.7755658785102502 , -0.6312666378723208 , 5.6000000000000005 , 1 , 0.0352 , 0.722 , 0.3436 ,
0.8061468052647157 , -0.5917155806310094 , 5.65 , 1 , 0.9192 , 0.0458 , 0.9388 ,
0.8347127848391598 , -0.5506855425976376 , 5.7 , 1 , 0.1206 , 0.6864 , 0.8337 ,
0.8611924171615208 , -0.5082790774992584 , 5.75 , 1 , 0.198 , 0.7331 , 0.4686 ,
0.8855195169413194 , -0.4646021794137566 , 5.800000000000001 , 1 , 0.5512 , 0.5873 , 0.7974 ,
0.9076332790984135 , -0.4197640178398589 , 5.8500000000000005 , 1 , 0.0361 , 0.799 , 0.9194 ,
0.9274784307440359 , -0.373876664830236 , 5.9 , 1 , 0.6181 , 0.2455 , 0.244 ,
0.9450053693342275 , -0.32705481486974064 , 5.95 , 1 , 0.8979 , 0.3907 , 0.9527 ,
0.960170286650366 , -0.27941549819892586 , 6.0 , 1 , 0.8901 , 0.5946 , 0.9825 ,
0.9729352782968976 , -0.23107778829939138 , 6.050000000000001 , 1 , 0.8452 , 0.3023 , 0.7082 ,
0.9832684384425847 , -0.18216250427209502 , 6.1000000000000005 , 1 , 0.6258 , 0.8533 , 0.7164 ,
0.991143939568469 , -0.13279190885251674 , 6.15 , 1 , 0.5463 , 0.0002 , 0.6119 ,
0.9965420970232175 , -0.0830894028174964 , 6.2 , 1 , 0.6773 , 0.7732 , 0.4934 ,
0.9994494182244994 , -0.03317921654755682 , 6.25 , 1 , 0.4682 , 0.376 , 0.2964 ,
0.9998586363834151 , 0.0168139004843506 , 6.300000000000001 , 1 , 0.7496 , 0.9599 , 0.3776 ,
0.9977687286676841 , 0.06676499152155635 , 6.3500000000000005 , 1 , 0.3558 , 0.9621 , 0.9181 ,
0.9931849187581926 , 0.11654920485049364 , 6.4 , 1 , 0.431 , 0.1811 , 0.9943 ,
0.9861186637925126 , 0.1660421058649572 , 6.45 , 1 , 0.4756 , 0.3928 , 0.202 ,
0.9765876257280235 , 0.21511998808781552 , 6.5 , 1 , 0.1841 , 0.7235 , 0.5677 ,
0.9646156271962179 , 0.2636601823727792 , 6.550000000000001 , 1 , 0.8679 , 0.1371 , 0.8283 ,
0.9502325919585293 , 0.3115413635133787 , 6.6000000000000005 , 1 , 0.7411 , 0.0478 , 0.1749 ,
0.9334744701125118 , 0.35864385349280037 , 6.65 , 1 , 0.2277 , 0.4987 , 0.5691 ,
0.9143831482353194 , 0.4048499206165983 , 6.7 , 1 , 0.6973 , 0.0592 , 0.3085 ,
0.8930063446890767 , 0.4500440737806176 , 6.75 , 1 , 0.2945 , 0.3461 , 0.2749 ,
0.8693974903498248 , 0.49411335113860894 , 6.800000000000001 , 1 , 0.564 , 0.3309 , 0.4088 ,
0.8436155950581591 , 0.5369476024480118 , 6.8500000000000005 , 1 , 0.9481 , 0.1515 , 0.1594 ,
0.8157251001253568 , 0.5784397643882001 , 6.9 , 1 , 0.6817 , 0.3825 , 0.7724 ,
0.785795717263661 , 0.618486128163024 , 6.95 , 1 , 0.8607 , 0.0657 , 0.2006 ,
0.7539022543433046 , 0.6569865987187891 , 7.0 , 1 , 0.477 , 0.7709 , 0.8747 ,
0.7201244284117935 , 0.6938449449297643 , 7.050000000000001 , 1 , 0.1886 , 0.5365 , 0.8887 ,
0.6845466664428059 , 0.7289690401258765 , 7.1000000000000005 , 1 , 0.0894 , 0.3606 , 0.4008 ,
0.6472578943127236 , 0.7622710923614112 , 7.15 , 1 , 0.0666 , 0.5426 , 0.6551 ,
0.6083513145322546 , 0.7936678638491531 , 7.2 , 1 , 0.3026 , 0.39 , 0.1356 ,
0.5679241732886948 , 0.8230808790115055 , 7.25 , 1 , 0.8566 , 0.3331 , 0.2375 ,
0.5260775173811045 , 0.8504366206285648 , 7.300000000000001 , 1 , 0.4933 , 0.1709 , 0.0914 ,
0.48291594165593704 , 0.8756667135928826 , 7.3500000000000005 , 1 , 0.5059 , 0.4682 , 0.5767 ,
0.43854732757439036 , 0.8987080958116269 , 7.4 , 1 , 0.4587 , 0.0377 , 0.5869 ,
0.39308257356494075 , 0.9195031758289707 , 7.45 , 1 , 0.0005 , 0.817 , 0.9273 ,
0.3466353178350258 , 0.9379999767747389 , 7.5 , 1 , 0.2669 , 0.3991 , 0.2117 ,
0.2993216543347062 , 0.9541522662795151 , 7.550000000000001 , 1 , 0.3546 , 0.7756 , 0.9873 ,
0.25125984258225487 , 0.9679196720314865 , 7.6000000000000005 , 1 , 0.2413 , 0.0643 , 0.1874 ,
0.20257001207694433 , 0.9792677826862 , 7.65 , 1 , 0.1476 , 0.1335 , 0.905 ,
0.15337386203786435 , 0.9881682338770004 , 7.7 , 1 , 0.0312 , 0.143 , 0.4908 ,
0.10379435721925297 , 0.9945987791111761 , 7.75 , 1 , 0.3779 , 0.3589 , 0.862 ,
0.05395542056264886 , 0.998543345374605 , 7.800000000000001 , 1 , 0.7696 , 0.4825 , 0.6186 ,
0.003981623454078851 , 0.9999920733059188 , 7.8500000000000005 , 1 , 0.2307 , 0.7132 , 0.483 ,
-0.04600212563953695 , 0.998941341839772 , 7.9 , 1 , 0.5369 , 0.597 , 0.46 ,
-0.09587089337649782 , 0.9953937772576199 , 7.95 , 1 , 0.6191 , 0.1255 , 0.7924 ,
-0.14550003380861354 , 0.9893582466233818 , 8.0 , 1 , 0.1733 , 0.3485 , 0.0371 ,
-0.19476549993116135 , 0.9808498356203995 , 8.05 , 1 , 0.249 , 0.9559 , 0.5238 ,
-0.2435441537357911 , 0.9698898108450863 , 8.1 , 1 , 0.0844 , 0.2209 , 0.7716 ,
-0.2917140739914265 , 0.9565055666515091 , 8.15 , 1 , 0.3748 , 0.2107 , 0.4813 ,
-0.33915486098383624 , 0.9407305566797726 , 8.200000000000001 , 1 , 0.0145 , 0.6922 , 0.2896 ,
-0.3857479374522218 , 0.9226042102393402 , 8.25 , 1 , 0.8472 , 0.0309 , 0.9186 ,
-0.4313768449706208 , 0.9021718337562933 , 8.3 , 1 , 0.9271 , 0.7278 , 0.4751 ,
-0.47592753503330965 , 0.8794844975308649 , 8.35 , 1 , 0.0369 , 0.3515 , 0.7803 ,
-0.5192886541166856 , 0.8545989080882804 , 8.4 , 1 , 0.923 , 0.0947 , 0.8762 ,
-0.5613518220050729 , 0.827577266441983 , 8.450000000000001 , 1 , 0.4695 , 0.2847 , 0.6878 ,
-0.6020119026848236 , 0.7984871126234903 , 8.5 , 1 , 0.1908 , 0.5791 , 0.9565 ,
-0.6411672671296018 , 0.7674011568674873 , 8.55 , 1 , 0.9831 , 0.7872 , 0.3122 ,
-0.6787200473200125 , 0.7343970978741133 , 8.6 , 1 , 0.2705 , 0.6444 , 0.5118 ,
-0.7145763808626919 , 0.699557428602668 , 8.65 , 1 , 0.2581 , 0.6656 , 0.8697 ,
-0.7486466455973999 , 0.662969230082182 , 8.700000000000001 , 1 , 0.3666 , 0.0166 , 0.8272 ,
-0.7808456836057491 , 0.6247239537541924 , 8.75 , 1 , 0.0104 , 0.9114 , 0.3633 ,
-0.811093014061656 , 0.5849171928917617 , 8.8 , 1 , 0.6144 , 0.3485 , 0.6358 ,
-0.8393130343914837 , 0.5436484436660883 , 8.85 , 1 , 0.4702 , 0.0346 , 0.1118 ,
-0.8654352092411123 , 0.5010208564578846 , 8.9 , 1 , 0.8928 , 0.1921 , 0.192 ,
-0.8893942467775822 , 0.45714097803515424 , 8.950000000000001 , 1 , 0.7103 , 0.4397 , 0.6069 ,
-0.9111302618846769 , 0.4121184852417566 , 9.0 , 1 , 0.9179 , 0.6527 , 0.1944 ,
-0.9305889258445285 , 0.366065910862411 , 9.05 , 1 , 0.4001 , 0.8572 , 0.9005 ,
-0.9477216021311119 , 0.3190983623493521 , 9.1 , 1 , 0.8925 , 0.9215 , 0.9992 ,
-0.9624854679762374 , 0.27133323411363275 , 9.15 , 1 , 0.1536 , 0.5336 , 0.4185 ,
-0.974843621404164 , 0.22288991410024592 , 9.200000000000001 , 1 , 0.6908 , 0.2337 , 0.1244 ,
-0.9847651734673236 , 0.17388948538043356 , 9.25 , 1 , 0.252 , 0.7523 , 0.3865 ,
-0.9922253254526034 , 0.1244544235070617 , 9.3 , 1 , 0.8297 , 0.2061 , 0.9823 ,
-0.997205430865212 , 0.07470829038953478 , 9.35 , 1 , 0.2723 , 0.894 , 0.4245 ,
-0.9996930420352065 , 0.024775425453357765 , 9.4 , 1 , 0.9389 , 0.3616 , 0.2236 ,
-0.9996819412301848 , -0.025219365143660497 , 9.450000000000001 , 1 , 0.3127 , 0.8845 , 0.7352 ,
-0.9971721561963784 , -0.0751511204618093 , 9.5 , 1 , 0.6153 , 0.199 , 0.0001 ,
-0.9921699600893009 , -0.12489503711675232 , 9.55 , 1 , 0.5472 , 0.7379 , 0.4092 ,
-0.9846878557941267 , -0.1743267812229814 , 9.600000000000001 , 1 , 0.1741 , 0.9143 , 0.9138 ,
-0.9747445446749893 , -0.2233227991637839 , 9.65 , 1 , 0.4897 , 0.8679 , 0.9131 ,
-0.9623648798313097 , -0.2717606264109442 , 9.700000000000001 , 1 , 0.7064 , 0.5792 , 0.3809 ,
-0.9475798039779932 , -0.31951919362227366 , 9.75 , 1 , 0.6913 , 0.2511 , 0.8118 ,
-0.9304262721047533 , -0.3664791292519284 , 9.8 , 1 , 0.389 , 0.5912 , 0.4828 ,
-0.9109471591078868 , -0.4125230579170943 , 9.850000000000001 , 1 , 0.7677 , 0.7402 , 0.3148 ,
-0.8891911526253609 , -0.45753589377532133 , 9.9 , 1 , 0.4042 , 0.2706 , 0.7034 ,
-0.8652126313430711 , -0.5014051281791989 , 9.950000000000001 , 1 , 0.866 , 0.8733 , 0.9528 ,
]

boat1 = [
	-1.0, 1.0, 0.0, 1.0, 0.5,0.5,0.2,
	-0.5, 1.0, 0.0, 1.0, 0.5,0.2,0.5,
	-0.5, 0.0, 0.0, 1.0, 0.2,0.5,0.5,
	-0.5,1.0,0.0,1.0, 0.5,0.2,0.5,
	-0.5,0.0,0.0,1.0, 0.2,0.5,0.5,
	0.5,1.0,0.0,1.0, 0.2,0.2,0.5,
	-0.5,0.0,0.0,1.0, 0.2,0.5,0.5,
	0.5,1.0,0.0,1.0, 0.2,0.2,0.5,
	0.5,0.0,0.0,1.0, 0.5,0.2,0.2,
	0.5,1.0,0.0,1.0, 0.2,0.2,0.5,
	0.5,0.0,0.0,1.0, 0.5,0.2,0.2,
	1.0,1.0,0.0,1.0, 0.2,0.5,0.2,
	-1.0, 1.0, 0.5, 1.0, 0.5,0.5,0.2,
	-0.5, 1.0, 0.5, 1.0, 0.5,0.2,0.5,
	-0.5, 0.0, 0.5, 1.0, 0.2,0.5,0.5,
	-0.5,1.0,0.5,1.0, 0.5,0.2,0.5,
	-0.5,0.0,0.5,1.0, 0.2,0.5,0.5,
	0.5,1.0,0.5,1.0, 0.2,0.2,0.5,
	-0.5,0.0,0.5,1.0, 0.2,0.5,0.5,
	0.5,1.0,0.5,1.0, 0.2,0.2,0.5,
	0.5,0.0,0.5,1.0, 0.5,0.2,0.2,
	0.5,1.0,0.5,1.0, 0.2,0.2,0.5,
	0.5,0.0,0.5,1.0, 0.5,0.2,0.2,
	1.0,1.0,0.5,1.0, 0.2,0.5,0.2,
	0.5,0.0,0.5,1.0, 0.5,0.2,0.2,
	-0.5,0.0,0.5,1.0, 0.2,0.5,0.5,
	-0.5,0.0,0.0,1.0, 0.2,0.5,0.5,
	0.5,0.0,0.0,1.0, 0.5,0.2,0.2,
	-0.5,0.0,0.0,1.0, 0.2,0.5,0.5,
	0.5,0.0,0.5,1.0, 0.5,0.2,0.2,
	-1.0, 1.0, 0.5, 1.0, 0.5,0.5,0.2,
	-0.5, 0.0, 0.5, 1.0, 0.2,0.5,0.5,
	-1.0, 1.0, 0.0, 1.0, 0.5,0.5,0.2,
	-1.0, 1.0, 0.0, 1.0, 0.5,0.5,0.2,
	-0.5, 0.0, 0.0, 1.0, 0.2,0.5,0.5,
	-0.5, 0.0, 0.5, 1.0, 0.2,0.5,0.5,
	1.0, 1.0, 0.5, 1.0, 0.2,0.5,0.2,
	0.5, 0.0, 0.5, 1.0, 0.5,0.2,0.2,
	1.0, 1.0, 0.0, 1.0, 0.2,0.5,0.2,
	1.0, 1.0, 0.0, 1.0, 0.2,0.5,0.2,
	0.5, 0.0, 0.0, 1.0, 0.5,0.2,0.2,
	0.5, 0.0, 0.5, 1.0, 0.5,0.2,0.2
]

function main() {
	
//==============================================================================
  // Retrieve <canvas> element
  var canvas = document.getElementById('webgl');

  // Get the rendering context for WebGL
  var gl = getWebGLContext(canvas);
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }

  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }

  // 
  var n = initVertexBuffer(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }

  window.addEventListener("keydown", myKeyDown, false);
  window.addEventListener("keyup", myKeyUp, false);

  // Specify the color for clearing <canvas>
  gl.clearColor(0.0, 0.0, 0.0, 1.0);

	// NEW!! Enable 3D depth-test when drawing: don't over-draw at any pixel 
	// unless the new Z value is closer to the eye than the old one..
//	gl.depthFunc(gl.LESS);			 // WebGL default setting: (default)
	gl.enable(gl.DEPTH_TEST); 	 
	 
//==============================================================================
// STEP 4:   REMOVE This "reversed-depth correction"
//       when you apply any of the 3D camera-lens transforms: 
//      (e.g. Matrix4 member functions 'perspective(), frustum(), ortho() ...)
//======================REVERSED-DEPTH Correction===============================

  //  b) reverse the usage of the depth-buffer's stored values, like this:
  //gl.enable(gl.DEPTH_TEST); // enabled by default, but let's be SURE.
  //gl.clearDepth(0.0);       // each time we 'clear' our depth buffer, set all
                            // pixel depths to 0.0  (1.0 is DEFAULT)
  //gl.depthFunc(gl.GREATER); // draw a pixel only if its depth value is GREATER
                            // than the depth buffer's stored value.
                            // (gl.LESS is DEFAULT; reverse it!)
//=====================================================================

  // Get handle to graphics system's storage location of u_ModelMatrix
  var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
  if (!u_ModelMatrix) {
    console.log('Failed to get the storage location of u_ModelMatrix');
    return;
  }
  // Create a local version of our model matrix in JavaScript 
  var modelMatrix = new Matrix4();
  
  // Create, init current rotation angle value in JavaScript

//-----------------  
  // Start drawing: create 'tick' variable whose value is this function:
  var tick = function() {
	animate();  // Update the rotation angle

    drawAll(gl, n, currentAngle, modelMatrix, u_ModelMatrix);   // Draw shapes
    // report current angle on console
    //console.log('currentAngle=',currentAngle);
    requestAnimationFrame(tick, canvas);   
    									// Request that the browser re-draw the webpage
  };
  tick();							// start (and continue) animation: draw current image
    
}

function initVertexBuffer(gl) {
//==============================================================================
// Create one giant vertex buffer object (VBO) that holds all vertices for all
// shapes.
 
 	// Make each 3D shape in its own array of vertices:
  makeCylinder();					// create, fill the cylVerts array
  makeSphere();						// create, fill the sphVerts array
  makeTorus();						// create, fill the torVerts array
  makeGroundGrid();				// create, fill the gndVerts array
  

  // how many floats total needed to store all shapes?
	var mySiz = (cylVerts.length + sphVerts.length + 
							 torVerts.length + gndVerts.length
							 + sl1.length + sl2.length
							 + sl3.length + sl4.length
							 + sl5.length + spiral.length
							 + spiral2.length + spiralsq.length
							 + boat1.length);	

	// How many vertices total?
	var nn = (mySiz / floatsPerVertex);
	console.log('nn is', nn, 'mySiz is', mySiz, 'floatsPerVertex is', floatsPerVertex);
	// Copy all shapes into one big Float32 array:

  var colorShapes = new Float32Array(mySiz);
	// Copy them:  remember where to start for each shape:
	cylStart = 0;							// we stored the cylinder first.
  for(i=0,j=0; j< cylVerts.length; i++,j++) {
  	colorShapes[i] = cylVerts[j];
		}
		sphStart = i;						// next, we'll store the sphere;
	for(j=0; j< sphVerts.length; i++, j++) {// don't initialize i -- reuse it!
		colorShapes[i] = sphVerts[j];
		}
		torStart = i;						// next, we'll store the torus;
	for(j=0; j< torVerts.length; i++, j++) {
		colorShapes[i] = torVerts[j];
		}
		gndStart = i;						// next we'll store the ground-plane;
	for(j=0; j< gndVerts.length; i++, j++) {
		colorShapes[i] = gndVerts[j];
		}
		sl1Start = i;	
	for(j=0; j< sl1.length; i++, j++) {
		colorShapes[i] = sl1[j];
		}
		sl2Start = i;	
	for(j=0; j< sl2.length; i++, j++) {
			colorShapes[i] = sl2[j];
		}
		sl3Start = i;	
	for(j=0; j< sl3.length; i++, j++) {
			colorShapes[i] = sl3[j];
		}
		sl4Start = i;	
	for(j=0; j< sl4.length; i++, j++) {
			colorShapes[i] = sl4[j];
		}
		sl5Start = i;	
	for(j=0; j< sl5.length; i++, j++) {
			colorShapes[i] = sl5[j];
		}
		spiralStart = i;	
	for(j=0; j< spiral.length; i++, j++) {
			colorShapes[i] = spiral[j];
		}
		boatStart = i;	
	for(j=0; j< boat1.length; i++, j++) {
			colorShapes[i] = boat1[j];
		}
		spiral2Start = i;	
	for(j=0; j< spiral.length; i++, j++) {
			colorShapes[i] = spiral2[j];
		}
		spiralsqStart = i;	
	for(j=0; j< spiral.length; i++, j++) {
			colorShapes[i] = spiralsq[j];
		}
		


  // Create a buffer object on the graphics hardware:
  var shapeBufferHandle = gl.createBuffer();  
  if (!shapeBufferHandle) {
    console.log('Failed to create the shape buffer object');
    return false;
  }

  // Bind the the buffer object to target:
  gl.bindBuffer(gl.ARRAY_BUFFER, shapeBufferHandle);
  // Transfer data from Javascript array colorShapes to Graphics system VBO
  // (Use sparingly--may be slow if you transfer large shapes stored in files)
  gl.bufferData(gl.ARRAY_BUFFER, colorShapes, gl.STATIC_DRAW);
    
  //Get graphics system's handle for our Vertex Shader's position-input variable: 
  var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
  if (a_Position < 0) {
    console.log('Failed to get the storage location of a_Position');
    return -1;
  }

  var FSIZE = colorShapes.BYTES_PER_ELEMENT; // how many bytes per stored value?

  // Use handle to specify how to retrieve **POSITION** data from our VBO:
  gl.vertexAttribPointer(
  		a_Position, 	// choose Vertex Shader attribute to fill with data
  		4, 						// how many values? 1,2,3 or 4.  (we're using x,y,z,w)
  		gl.FLOAT, 		// data type for each value: usually gl.FLOAT
  		false, 				// did we supply fixed-point data AND it needs normalizing?
  		FSIZE * floatsPerVertex, // Stride -- how many bytes used to store each vertex?
  									// (x,y,z,w, r,g,b) * bytes/value
  		0);						// Offset -- now many bytes from START of buffer to the
  									// value we will actually use?
  gl.enableVertexAttribArray(a_Position);  
  									// Enable assignment of vertex buffer object's position data

  // Get graphics system's handle for our Vertex Shader's color-input variable;
  var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
  if(a_Color < 0) {
    console.log('Failed to get the storage location of a_Color');
    return -1;
  }
  // Use handle to specify how to retrieve **COLOR** data from our VBO:
  gl.vertexAttribPointer(
  	a_Color, 				// choose Vertex Shader attribute to fill with data
  	3, 							// how many values? 1,2,3 or 4. (we're using R,G,B)
  	gl.FLOAT, 			// data type for each value: usually gl.FLOAT
  	false, 					// did we supply fixed-point data AND it needs normalizing?
  	FSIZE * 7, 			// Stride -- how many bytes used to store each vertex?
  									// (x,y,z,w, r,g,b) * bytes/value
  	FSIZE * 4);			// Offset -- how many bytes from START of buffer to the
  									// value we will actually use?  Need to skip over x,y,z,w
  									
  gl.enableVertexAttribArray(a_Color);  
  									// Enable assignment of vertex buffer object's position data

	//--------------------------------DONE!
  // Unbind the buffer object 
  gl.bindBuffer(gl.ARRAY_BUFFER, null);

  return nn;
}

// simple & quick-- 
// I didn't use any arguments such as color choices, # of verts,slices,bars, etc.
// YOU can improve these functions to accept useful arguments...
//
function makeDiamond() {
//==============================================================================
// Make a diamond-like shape from two adjacent tetrahedra, aligned with Z axis.

	// YOU write this one...
	
}

function makePyramid() {
//==============================================================================
// Make a 4-cornered pyramid from one OpenGL TRIANGLE_STRIP primitive.
// All vertex coords are +/1 or zero; pyramid base is in xy plane.

  	// YOU write this one...
}


function makeCylinder() {
//==============================================================================
// Make a cylinder shape from one TRIANGLE_STRIP drawing primitive, using the
// 'stepped spiral' design described in notes.
// Cylinder center at origin, encircles z axis, radius 1, top/bottom at z= +/-1.
//
 var ctrColr = new Float32Array([0.2, 0.2, 0.2]);	// dark gray
 var topColr = new Float32Array([0.4, 0.7, 0.4]);	// light green
 var botColr = new Float32Array([0.5, 0.5, 1.0]);	// light blue
 var capVerts = 16;	// # of vertices around the topmost 'cap' of the shape
 var botRadius = 1.6;		// radius of bottom of cylinder (top always 1.0)
 
 // Create a (global) array to hold this cylinder's vertices;
 cylVerts = new Float32Array(  ((capVerts*6) -2) * floatsPerVertex);
										// # of vertices * # of elements needed to store them. 

	// Create circle-shaped top cap of cylinder at z=+1.0, radius 1.0
	// v counts vertices: j counts array elements (vertices * elements per vertex)
	for(v=1,j=0; v<2*capVerts; v++,j+=floatsPerVertex) {	
		// skip the first vertex--not needed.
		if(v%2==0)
		{				// put even# vertices at center of cylinder's top cap:
			cylVerts[j  ] = 0.0; 			// x,y,z,w == 0,0,1,1
			cylVerts[j+1] = 0.0;	
			cylVerts[j+2] = 1.0; 
			cylVerts[j+3] = 1.0;			// r,g,b = topColr[]
			cylVerts[j+4]=ctrColr[0]; 
			cylVerts[j+5]=ctrColr[1]; 
			cylVerts[j+6]=ctrColr[2];
		}
		else { 	// put odd# vertices around the top cap's outer edge;
						// x,y,z,w == cos(theta),sin(theta), 1.0, 1.0
						// 					theta = 2*PI*((v-1)/2)/capVerts = PI*(v-1)/capVerts
			cylVerts[j  ] = Math.cos(Math.PI*(v-1)/capVerts);			// x
			cylVerts[j+1] = Math.sin(Math.PI*(v-1)/capVerts);			// y
			//	(Why not 2*PI? because 0 < =v < 2*capVerts, so we
			//	 can simplify cos(2*PI * (v-1)/(2*capVerts))
			cylVerts[j+2] = 1.0;	// z
			cylVerts[j+3] = 1.0;	// w.
			// r,g,b = topColr[]
			cylVerts[j+4]=topColr[0]; 
			cylVerts[j+5]=topColr[1]; 
			cylVerts[j+6]=topColr[2];			
		}
	}
	// Create the cylinder side walls, made of 2*capVerts vertices.
	// v counts vertices within the wall; j continues to count array elements
	for(v=0; v< 2*capVerts; v++, j+=floatsPerVertex) {
		if(v%2==0)	// position all even# vertices along top cap:
		{		
				cylVerts[j  ] = Math.cos(Math.PI*(v)/capVerts);		// x
				cylVerts[j+1] = Math.sin(Math.PI*(v)/capVerts);		// y
				cylVerts[j+2] = 1.0;	// z
				cylVerts[j+3] = 1.0;	// w.
				// r,g,b = topColr[]
				cylVerts[j+4]=topColr[0]; 
				cylVerts[j+5]=topColr[1]; 
				cylVerts[j+6]=topColr[2];			
		}
		else		// position all odd# vertices along the bottom cap:
		{
				cylVerts[j  ] = botRadius * Math.cos(Math.PI*(v-1)/capVerts);		// x
				cylVerts[j+1] = botRadius * Math.sin(Math.PI*(v-1)/capVerts);		// y
				cylVerts[j+2] =-1.0;	// z
				cylVerts[j+3] = 1.0;	// w.
				// r,g,b = topColr[]
				cylVerts[j+4]=botColr[0]; 
				cylVerts[j+5]=botColr[1]; 
				cylVerts[j+6]=botColr[2];			
		}
	}
	// Create the cylinder bottom cap, made of 2*capVerts -1 vertices.
	// v counts the vertices in the cap; j continues to count array elements
	for(v=0; v < (2*capVerts -1); v++, j+= floatsPerVertex) {
		if(v%2==0) {	// position even #'d vertices around bot cap's outer edge
			cylVerts[j  ] = botRadius * Math.cos(Math.PI*(v)/capVerts);		// x
			cylVerts[j+1] = botRadius * Math.sin(Math.PI*(v)/capVerts);		// y
			cylVerts[j+2] =-1.0;	// z
			cylVerts[j+3] = 1.0;	// w.
			// r,g,b = topColr[]
			cylVerts[j+4]=botColr[0]; 
			cylVerts[j+5]=botColr[1]; 
			cylVerts[j+6]=botColr[2];		
		}
		else {				// position odd#'d vertices at center of the bottom cap:
			cylVerts[j  ] = 0.0; 			// x,y,z,w == 0,0,-1,1
			cylVerts[j+1] = 0.0;	
			cylVerts[j+2] =-1.0; 
			cylVerts[j+3] = 1.0;			// r,g,b = botColr[]
			cylVerts[j+4]=botColr[0]; 
			cylVerts[j+5]=botColr[1]; 
			cylVerts[j+6]=botColr[2];
		}
	}
}

function makeSphere() {
//==============================================================================
// Make a sphere from one OpenGL TRIANGLE_STRIP primitive.   Make ring-like 
// equal-lattitude 'slices' of the sphere (bounded by planes of constant z), 
// and connect them as a 'stepped spiral' design (see makeCylinder) to build the
// sphere from one triangle strip.
  var slices = 13;		// # of slices of the sphere along the z axis. >=3 req'd
											// (choose odd # or prime# to avoid accidental symmetry)
  var sliceVerts	= 27;	// # of vertices around the top edge of the slice
											// (same number of vertices on bottom of slice, too)
  var topColr = new Float32Array([0.7, 0.7, 0.7]);	// North Pole: light gray
  var equColr = new Float32Array([0.3, 0.7, 0.3]);	// Equator:    bright green
  var botColr = new Float32Array([0.9, 0.9, 0.9]);	// South Pole: brightest gray.
  var sliceAngle = Math.PI/slices;	// lattitude angle spanned by one slice.

	// Create a (global) array to hold this sphere's vertices:
  sphVerts = new Float32Array(  ((slices * 2* sliceVerts) -2) * floatsPerVertex);
										// # of vertices * # of elements needed to store them. 
										// each slice requires 2*sliceVerts vertices except 1st and
										// last ones, which require only 2*sliceVerts-1.
										
	// Create dome-shaped top slice of sphere at z=+1
	// s counts slices; v counts vertices; 
	// j counts array elements (vertices * elements per vertex)
	var cos0 = 0.0;					// sines,cosines of slice's top, bottom edge.
	var sin0 = 0.0;
	var cos1 = 0.0;
	var sin1 = 0.0;	
	var j = 0;							// initialize our array index
	var isLast = 0;
	var isFirst = 1;
	for(s=0; s<slices; s++) {	// for each slice of the sphere,
		// find sines & cosines for top and bottom of this slice
		if(s==0) {
			isFirst = 1;	// skip 1st vertex of 1st slice.
			cos0 = 1.0; 	// initialize: start at north pole.
			sin0 = 0.0;
		}
		else {					// otherwise, new top edge == old bottom edge
			isFirst = 0;	
			cos0 = cos1;
			sin0 = sin1;
		}								// & compute sine,cosine for new bottom edge.
		cos1 = Math.cos((s+1)*sliceAngle);
		sin1 = Math.sin((s+1)*sliceAngle);
		// go around the entire slice, generating TRIANGLE_STRIP verts
		// (Note we don't initialize j; grows with each new attrib,vertex, and slice)
		if(s==slices-1) isLast=1;	// skip last vertex of last slice.
		for(v=isFirst; v< 2*sliceVerts-isLast; v++, j+=floatsPerVertex) {	
			if(v%2==0)
			{				// put even# vertices at the the slice's top edge
							// (why PI and not 2*PI? because 0 <= v < 2*sliceVerts
							// and thus we can simplify cos(2*PI(v/2*sliceVerts))  
				sphVerts[j  ] = sin0 * Math.cos(Math.PI*(v)/sliceVerts); 	
				sphVerts[j+1] = sin0 * Math.sin(Math.PI*(v)/sliceVerts);	
				sphVerts[j+2] = cos0;		
				sphVerts[j+3] = 1.0;			
			}
			else { 	// put odd# vertices around the slice's lower edge;
							// x,y,z,w == cos(theta),sin(theta), 1.0, 1.0
							// 					theta = 2*PI*((v-1)/2)/capVerts = PI*(v-1)/capVerts
				sphVerts[j  ] = sin1 * Math.cos(Math.PI*(v-1)/sliceVerts);		// x
				sphVerts[j+1] = sin1 * Math.sin(Math.PI*(v-1)/sliceVerts);		// y
				sphVerts[j+2] = cos1;																				// z
				sphVerts[j+3] = 1.0;																				// w.		
			}
			if(s==0) {	// finally, set some interesting colors for vertices:
				sphVerts[j+4]=topColr[0]; 
				sphVerts[j+5]=topColr[1]; 
				sphVerts[j+6]=topColr[2];	
				}
			else if(s==slices-1) {
				sphVerts[j+4]=botColr[0]; 
				sphVerts[j+5]=botColr[1]; 
				sphVerts[j+6]=botColr[2];	
			}
			else {
					sphVerts[j+4]=Math.random();// equColr[0]; 
					sphVerts[j+5]=Math.random();// equColr[1]; 
					sphVerts[j+6]=Math.random();// equColr[2];					
			}
		}
	}
}

function makeTorus() {
//==============================================================================
// 		Create a torus centered at the origin that circles the z axis.  
// Terminology: imagine a torus as a flexible, cylinder-shaped bar or rod bent 
// into a circle around the z-axis. The bent bar's centerline forms a circle
// entirely in the z=0 plane, centered at the origin, with radius 'rbend'.  The 
// bent-bar circle begins at (rbend,0,0), increases in +y direction to circle  
// around the z-axis in counter-clockwise (CCW) direction, consistent with our
// right-handed coordinate system.
// 		This bent bar forms a torus because the bar itself has a circular cross-
// section with radius 'rbar' and angle 'phi'. We measure phi in CCW direction 
// around the bar's centerline, circling right-handed along the direction 
// forward from the bar's start at theta=0 towards its end at theta=2PI.
// 		THUS theta=0, phi=0 selects the torus surface point (rbend+rbar,0,0);
// a slight increase in phi moves that point in -z direction and a slight
// increase in theta moves that point in the +y direction.  
// To construct the torus, begin with the circle at the start of the bar:
//					xc = rbend + rbar*cos(phi); 
//					yc = 0; 
//					zc = -rbar*sin(phi);			(note negative sin(); right-handed phi)
// and then rotate this circle around the z-axis by angle theta:
//					x = xc*cos(theta) - yc*sin(theta) 	
//					y = xc*sin(theta) + yc*cos(theta)
//					z = zc
// Simplify: yc==0, so
//					x = (rbend + rbar*cos(phi))*cos(theta)
//					y = (rbend + rbar*cos(phi))*sin(theta) 
//					z = -rbar*sin(phi)
// To construct a torus from a single triangle-strip, make a 'stepped spiral' 
// along the length of the bent bar; successive rings of constant-theta, using 
// the same design used for cylinder walls in 'makeCyl()' and for 'slices' in 
// makeSphere().  Unlike the cylinder and sphere, we have no 'special case' 
// for the first and last of these bar-encircling rings.
//
var rbend = 1.0;										// Radius of circle formed by torus' bent bar
var rbar = 0.5;											// radius of the bar we bent to form torus
var barSlices = 23;									// # of bar-segments in the torus: >=3 req'd;
																		// more segments for more-circular torus
var barSides = 13;										// # of sides of the bar (and thus the 
																		// number of vertices in its cross-section)
																		// >=3 req'd;
																		// more sides for more-circular cross-section
// for nice-looking torus with approx square facets, 
//			--choose odd or prime#  for barSides, and
//			--choose pdd or prime# for barSlices of approx. barSides *(rbend/rbar)
// EXAMPLE: rbend = 1, rbar = 0.5, barSlices =23, barSides = 11.

	// Create a (global) array to hold this torus's vertices:
 torVerts = new Float32Array(floatsPerVertex*(2*barSides*barSlices +2));
//	Each slice requires 2*barSides vertices, but 1st slice will skip its first 
// triangle and last slice will skip its last triangle. To 'close' the torus,
// repeat the first 2 vertices at the end of the triangle-strip.  Assume 7

var phi=0, theta=0;										// begin torus at angles 0,0
var thetaStep = 2*Math.PI/barSlices;	// theta angle between each bar segment
var phiHalfStep = Math.PI/barSides;		// half-phi angle between each side of bar
																			// (WHY HALF? 2 vertices per step in phi)
	// s counts slices of the bar; v counts vertices within one slice; j counts
	// array elements (Float32) (vertices*#attribs/vertex) put in torVerts array.
	for(s=0,j=0; s<barSlices; s++) {		// for each 'slice' or 'ring' of the torus:
		for(v=0; v< 2*barSides; v++, j+=7) {		// for each vertex in this slice:
			if(v%2==0)	{	// even #'d vertices at bottom of slice,
				torVerts[j  ] = (rbend + rbar*Math.cos((v)*phiHalfStep)) * 
																						 Math.cos((s)*thetaStep);
							  //	x = (rbend + rbar*cos(phi)) * cos(theta)
				torVerts[j+1] = (rbend + rbar*Math.cos((v)*phiHalfStep)) *
																						 Math.sin((s)*thetaStep);
								//  y = (rbend + rbar*cos(phi)) * sin(theta) 
				torVerts[j+2] = -rbar*Math.sin((v)*phiHalfStep);
								//  z = -rbar  *   sin(phi)
				torVerts[j+3] = 1.0;		// w
			}
			else {				// odd #'d vertices at top of slice (s+1);
										// at same phi used at bottom of slice (v-1)
				torVerts[j  ] = (rbend + rbar*Math.cos((v-1)*phiHalfStep)) * 
																						 Math.cos((s+1)*thetaStep);
							  //	x = (rbend + rbar*cos(phi)) * cos(theta)
				torVerts[j+1] = (rbend + rbar*Math.cos((v-1)*phiHalfStep)) *
																						 Math.sin((s+1)*thetaStep);
								//  y = (rbend + rbar*cos(phi)) * sin(theta) 
				torVerts[j+2] = -rbar*Math.sin((v-1)*phiHalfStep);
								//  z = -rbar  *   sin(phi)
				torVerts[j+3] = 1.0;		// w
			}
			torVerts[j+4] = Math.random();		// random color 0.0 <= R < 1.0
			torVerts[j+5] = Math.random();		// random color 0.0 <= G < 1.0
			torVerts[j+6] = Math.random();		// random color 0.0 <= B < 1.0
		}
	}
	// Repeat the 1st 2 vertices of the triangle strip to complete the torus:
			torVerts[j  ] = rbend + rbar;	// copy vertex zero;
						  //	x = (rbend + rbar*cos(phi==0)) * cos(theta==0)
			torVerts[j+1] = 0.0;
							//  y = (rbend + rbar*cos(phi==0)) * sin(theta==0) 
			torVerts[j+2] = 0.0;
							//  z = -rbar  *   sin(phi==0)
			torVerts[j+3] = 1.0;		// w
			torVerts[j+4] = Math.random();		// random color 0.0 <= R < 1.0
			torVerts[j+5] = Math.random();		// random color 0.0 <= G < 1.0
			torVerts[j+6] = Math.random();		// random color 0.0 <= B < 1.0
			j+=7; // go to next vertex:
			torVerts[j  ] = (rbend + rbar) * Math.cos(thetaStep);
						  //	x = (rbend + rbar*cos(phi==0)) * cos(theta==thetaStep)
			torVerts[j+1] = (rbend + rbar) * Math.sin(thetaStep);
							//  y = (rbend + rbar*cos(phi==0)) * sin(theta==thetaStep) 
			torVerts[j+2] = 0.0;
							//  z = -rbar  *   sin(phi==0)
			torVerts[j+3] = 1.0;		// w
			torVerts[j+4] = Math.random();		// random color 0.0 <= R < 1.0
			torVerts[j+5] = Math.random();		// random color 0.0 <= G < 1.0
			torVerts[j+6] = Math.random();		// random color 0.0 <= B < 1.0
}

function makeGroundGrid() {
//==============================================================================
// Create a list of vertices that create a large grid of lines in the x,y plane
// centered at x=y=z=0.  Draw this shape using the GL_LINES primitive.

	var xcount = 100;			// # of lines to draw in x,y to make the grid.
	var ycount = 100;		
	var xymax	= 50.0;			// grid size; extends to cover +/-xymax in x and y.
 	var xColr = new Float32Array([1.0, 1.0, 0.3]);	// bright yellow
 	var yColr = new Float32Array([0.5, 1.0, 0.5]);	// bright green.
 	
	// Create an (global) array to hold this ground-plane's vertices:
	gndVerts = new Float32Array(floatsPerVertex*2*(xcount+ycount));
						// draw a grid made of xcount+ycount lines; 2 vertices per line.
						
	var xgap = xymax/(xcount-1);		// HALF-spacing between lines in x,y;
	var ygap = xymax/(ycount-1);		// (why half? because v==(0line number/2))
	
	// First, step thru x values as we make vertical lines of constant-x:
	for(v=0, j=0; v<2*xcount; v++, j+= floatsPerVertex) {
		if(v%2==0) {	// put even-numbered vertices at (xnow, -xymax, 0)
			gndVerts[j  ] = -xymax + (v  )*xgap;	// x
			gndVerts[j+1] = -xymax;								// y
			gndVerts[j+2] = 0.0;									// z
			gndVerts[j+3] = 1.0;									// w.
		}
		else {				// put odd-numbered vertices at (xnow, +xymax, 0).
			gndVerts[j  ] = -xymax + (v-1)*xgap;	// x
			gndVerts[j+1] = xymax;								// y
			gndVerts[j+2] = 0.0;									// z
			gndVerts[j+3] = 1.0;									// w.
		}
		gndVerts[j+4] = xColr[0];			// red
		gndVerts[j+5] = xColr[1];			// grn
		gndVerts[j+6] = xColr[2];			// blu
	}
	// Second, step thru y values as wqe make horizontal lines of constant-y:
	// (don't re-initialize j--we're adding more vertices to the array)
	for(v=0; v<2*ycount; v++, j+= floatsPerVertex) {
		if(v%2==0) {		// put even-numbered vertices at (-xymax, ynow, 0)
			gndVerts[j  ] = -xymax;								// x
			gndVerts[j+1] = -xymax + (v  )*ygap;	// y
			gndVerts[j+2] = 0.0;									// z
			gndVerts[j+3] = 1.0;									// w.
		}
		else {					// put odd-numbered vertices at (+xymax, ynow, 0).
			gndVerts[j  ] = xymax;								// x
			gndVerts[j+1] = -xymax + (v-1)*ygap;	// y
			gndVerts[j+2] = 0.0;									// z
			gndVerts[j+3] = 1.0;									// w.
		}
		gndVerts[j+4] = yColr[0];			// red
		gndVerts[j+5] = yColr[1];			// grn
		gndVerts[j+6] = yColr[2];			// blu
	}
}

function drawAll(gl, n, currentAngle, modelMatrix, u_ModelMatrix) {
//==============================================================================
  // Clear <canvas>  colors AND the depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  modelMatrix.setIdentity();    // DEFINE 'world-space' coords.

/*
// STEP 2: add in a 'perspective()' function call here to define 'camera lens':
  modelMatrix.perspective(	??,   // FOVY: top-to-bottom vertical image angle, in degrees
                            ??,   // Image Aspect Ratio: camera lens width/height
                           	??,   // camera z-near distance (always positive; frustum begins at z = -znear)
                        		??);  // camera z-far distance (always positive; frustum ends at z = -zfar)

*/
modelMatrix.perspective(42, 1.0, 1.0, 1000.0)


/*
//  STEP 1:
// Make temporary view matrix that is still close to the origin and
// won't lose sight of our current CVV contents when used without 
// a properly-constructed projection matrix.
//TEMPORARY: 1/10th size camera pose to see what's in CVV locations
  modelMatrix.lookAt( ??, ??, ??,	// center of projection
                      ??, ??, ??,	// look-at point 
                      ??, ??, ??);	// View UP vector.
*/

  //modelMatrix.lookAt(.5,.5,.3,-1,-2,-.5,0,0,1)

/*
// STEP 2: 
//Replace the temporary view matrix with your final view matrix...
// GOAL: camera positioned at 3D point (5,5,3), looking at the 
//       3D point (-1,-2,-0.5),  using up vector (0,0,1).

  modelMatrix.lookAt( ??, ??, ??,	// center of projection
                      ??, ??, ??,	// look-at point 
					  ??, ??, ??);	// View UP vector.			  
*/
modelMatrix.lookAt(cameraX,cameraY,cameraZ,
					lookX,lookY,lookZ,
					0,0,1)

// Up // 
// Down //
// Left //
// Right

// W //
// A //
// S //
// D //

  //===========================================================
  //
  pushMatrix(modelMatrix);     // SAVE world coord system;
    	//-------Draw Spinning Cylinder:
    modelMatrix.translate(-0.4,-0.4, 0.0);  // 'set' means DISCARD old matrix,
    						// (drawing axes centered in CVV), and then make new
    						// drawing axes moved to the lower-left corner of CVV. 
    modelMatrix.scale(0.2, 0.2, 0.2);
    						// if you DON'T scale, cyl goes outside the CVV; clipped!
    modelMatrix.rotate(currentAngle, 0, 1, 0);  // spin around y axis.
  	// Drawing:
    // Pass our current matrix to the vertex shaders:
    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
    // Draw the cylinder's vertices, and no other vertices:
    gl.drawArrays(gl.TRIANGLE_STRIP,				// use this drawing primitive, and
    							cylStart/floatsPerVertex, // start at this vertex number, and
    							cylVerts.length/floatsPerVertex);	// draw this many vertices.
  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.
  //===========================================================
  //  
  pushMatrix(modelMatrix);  // SAVE world drawing coords.
    //--------Draw Spinning Sphere
    modelMatrix.translate( 0.4, 0.4, 0.0); // 'set' means DISCARD old matrix,
    						// (drawing axes centered in CVV), and then make new
    						// drawing axes moved to the lower-left corner of CVV.
                          // to match WebGL display canvas.
    modelMatrix.scale(0.3, 0.3, 0.3);
    						// Make it smaller:
    modelMatrix.rotate(currentAngle, 1, 1, 0);  // Spin on XY diagonal axis
  	// Drawing:		
  	// Pass our current matrix to the vertex shaders:
    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
    		// Draw just the sphere's vertices
    gl.drawArrays(gl.TRIANGLE_STRIP,				// use this drawing primitive, and
    							sphStart/floatsPerVertex,	// start at this vertex number, and 
    							sphVerts.length/floatsPerVertex);	// draw this many vertices.
  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.
  
  //===========================================================
  //  
  pushMatrix(modelMatrix);  // SAVE world drawing coords.
  //--------Draw Spinning torus
    modelMatrix.translate(-0.4, 0.4, 0.0);	// 'set' means DISCARD old matrix,
  
    modelMatrix.scale(0.3, 0.3, 0.3);
    						// Make it smaller:
    modelMatrix.rotate(currentAngle, 0, 1, 1);  // Spin on YZ axis
  	// Drawing:		
  	// Pass our current matrix to the vertex shaders:
    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
    		// Draw just the torus's vertices
    gl.drawArrays(gl.TRIANGLE_STRIP, 				// use this drawing primitive, and
    						  torStart/floatsPerVertex,	// start at this vertex number, and
    						  torVerts.length/floatsPerVertex);	// draw this many vertices.
  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.
  //===========================================================
  //
  pushMatrix(modelMatrix);  // SAVE world drawing coords.
  	//---------Draw Ground Plane, without spinning.
  	// position it.
  	modelMatrix.translate( 0.4, -0.4, 0.0);	
  	modelMatrix.scale(0.1, 0.1, 0.1);				// shrink by 10X:

  	// Drawing:
  	// Pass our current matrix to the vertex shaders:
    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
    // Draw just the ground-plane's vertices
    gl.drawArrays(gl.LINES, 								// use this drawing primitive, and
    						  gndStart/floatsPerVertex,	// start at this vertex number, and
    						  gndVerts.length/floatsPerVertex);	// draw this many vertices.
  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.
  //===========================================================
  //modelMatrix.scale(2, 2, 2);				// shrink by 10X:
  pushMatrix(modelMatrix);  // SAVE world drawing coords.
 
  modelMatrix.scale(0.7, 0.7, 0.6);				// shrink by 10X:

  modelMatrix.translate( 0.0, 0, 1.3);	
  modelMatrix.rotate(4*currentAngle, 0, 0, 1);	
  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP,	sl1Start/floatsPerVertex, sl1.length/floatsPerVertex);
  //modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.

  modelMatrix.translate(0.4525 , 0.4525 , -0.6 );	
  modelMatrix.rotate(angle1, -1, 0, 0);
  modelMatrix.translate(-0.4525 , -0.4525 , 0.6 );	

  //modelMatrix.translate(0 , 1.1 , -0.4);	
  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP,	sl2Start/floatsPerVertex, sl2.length/floatsPerVertex);
  
  modelMatrix.translate(-0.6787 , -0.6787 , -0.2);	
  modelMatrix.rotate(angle1, 1, 0, 0);
  modelMatrix.translate(0.6787 , 0.6787 , 0.2 );	

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP,	sl3Start/floatsPerVertex, sl3.length/floatsPerVertex);

  modelMatrix.translate(0.6787 , 0.6787 , -0.2);	
  modelMatrix.rotate(angle1, -1, 0, 0);
  modelMatrix.translate(-0.6787 , -0.6787 , 0.2 );	

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP,	sl4Start/floatsPerVertex, sl4.length/floatsPerVertex);

  modelMatrix.translate(-0.4525 , -0.4525 , 0.6 );	
  modelMatrix.rotate(angle1, 1, 0, 0);
  modelMatrix.translate(0.4525 , 0.4525 , -0.6 );	

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP,	sl5Start/floatsPerVertex, sl5.length/floatsPerVertex);

  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.

  pushMatrix(modelMatrix);  // SAVE world drawing coords.

  modelMatrix.scale(0.4, 0.4, 0.4);				// shrink by 10X:
  modelMatrix.rotate(currentAngle, 0, 0, 1);  // spin around y axis.
  modelMatrix.translate(2, 2, 0);


  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.LINE_STRIP,spiralStart/floatsPerVertex, spiral.length/floatsPerVertex);

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.LINE_STRIP,spiral2Start/floatsPerVertex, spiral2.length/floatsPerVertex);

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLES,spiralsqStart/floatsPerVertex, spiralsq.length/floatsPerVertex);

  modelMatrix = popMatrix();  // RESTORE 'world' drawing coords.

  modelMatrix.scale(0.4, 0.4, 0.4);	
  modelMatrix.translate(-2, 2, 0);
  modelMatrix.rotate(90, 1, 0, 0);  	
  modelMatrix.rotate(currentAngle*3, 0, 1, 0);  	

  gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
  gl.drawArrays(gl.TRIANGLE_STRIP, boatStart/floatsPerVertex, boat1.length/floatsPerVertex);

}

// Last time that this function was called:  (used for animation timing)
var g_last = Date.now();

var newX = 0
var newY = 0
var newZ = 0

function perp() {
	x = lookX - cameraX
	y = lookY - cameraY
	var angle90 = Math.atan2(-x,y)
	newX = -Math.cos(angle90)
	newY = -Math.sin(angle90)
}

function par() {
	x = lookX - cameraX
	y = lookY - cameraY
	z = lookZ - cameraZ
	var angle90 = Math.atan2(y,x)
	var angle902 = Math.atan2(z,x)
	newX = -Math.cos(angle90)
	newY = -Math.sin(angle90)
	newZ = Math.sin(angle902)
}


function keys(kev) {
	if (kev.code == "KeyA") {
		perp()
		cameraX = cameraX + newX*0.3
		cameraY = cameraY + newY*0.3
		lookX = lookX + newX*0.3
		lookY = lookY + newY*0.3
	}
	if (kev.code == "KeyD") {
		perp()
		cameraX = cameraX - newX*0.3
		cameraY = cameraY - newY*0.3
		lookX = lookX - newX*0.3
		lookY = lookY - newY*0.3
	}
	if (kev.code == "KeyW") {
		par()
		cameraX = cameraX - newX*0.3
		cameraY = cameraY - newY*0.3
		cameraZ = cameraZ + newZ*0.3
		lookX = lookX - newX*0.3
		lookY = lookY - newY*0.3
	}
	if (kev.code == "KeyS") {
		par()
		cameraX = cameraX + newX*0.3
		cameraY = cameraY + newY*0.3
		cameraZ = cameraZ - newZ*0.3
		lookX = lookX + newX*0.3
		lookY = lookY + newY*0.3
	}
	if (kev.code == "ArrowUp") {
		lookZ = lookZ + 0.3
	}
	if (kev.code == "ArrowLeft") {
		perp()
		lookX = lookX + newX*0.3
		lookY = lookY + newY*0.3

	}
	if (kev.code == "ArrowDown") {
		lookZ = lookZ - 0.3

	}
	if (kev.code == "ArrowRight") {
		perp()
		lookX = lookX - newX*0.3
		lookY = lookY - newY*0.3
	}
}

function animate() {
//==============================================================================
  // Calculate the elapsed time
  var now = Date.now();
  var elapsed = now - g_last;
  g_last = now;    
  // Update the current rotation angle (adjusted by the elapsed time)
  //  limit the angle to move smoothly between +20 and -85 degrees:
  if(angle1 > 40 && angle1rate > 0) angle1rate = -angle1rate;
  if(angle1 < 0 && angle1rate < 0) angle1rate = -angle1rate;
  currentAngle = currentAngle + (ANGLE_STEP * elapsed) / 1000.0; 
  angle1 = angle1 + (angle1rate * elapsed) / 4000.0; 
}

//==================HTML Button Callbacks
function nextShape() {
	shapeNum += 1;
	if(shapeNum >= shapeMax) shapeNum = 0;
}

function spinDown() {
 ANGLE_STEP -= 25; 
}

function spinUp() {
  ANGLE_STEP += 25; 
}

function runStop() {
  if(ANGLE_STEP*ANGLE_STEP > 1) {
    myTmp = ANGLE_STEP;
    ANGLE_STEP = 0;
  }
  else {
  	ANGLE_STEP = myTmp;
  }
}
 
function myKeyDown(kev) {

	keys(kev)
  //===============================================================================
  // Called when user presses down ANY key on the keyboard;
  //
  // For a light, easy explanation of keyboard events in JavaScript,
  // see:    http://www.kirupa.com/html5/keyboard_events_in_javascript.htm
  // For a thorough explanation of a mess of JavaScript keyboard event handling,
  // see:    http://javascript.info/tutorial/keyboard-events
  //
  // NOTE: Mozilla deprecated the 'keypress' event entirely, and in the
  //        'keydown' event deprecated several read-only properties I used
  //        previously, including kev.charCode, kev.keyCode. 
  //        Revised 2/2019:  use kev.key and kev.code instead.
  //
  // Report EVERYTHING in console:
	console.log(  "--kev.code:",    kev.code,   "\t\t--kev.key:",     kev.key, 
				"\n--kev.ctrlKey:", kev.ctrlKey,  "\t--kev.shiftKey:",kev.shiftKey,
				"\n--kev.altKey:",  kev.altKey,   "\t--kev.metaKey:", kev.metaKey);
  
  // and report EVERYTHING on webpage:
	  
   
	  switch(kev.code) {
		  case "KeyP":
			  console.log("Pause/unPause!\n");                // print on console,
		  
			  if(g_isRun==true) {
				g_isRun = false;    // STOP animation
				}
			  else {
				g_isRun = true;     // RESTART animation
				tick();
				}
			  break;
		  //------------------WASD navigation-----------------
		  case "KeyA":
			  console.log("a/A key: Strafe LEFT!\n");
			  
			  break;
	  	  case "KeyD":
			  console.log("d/D key: Strafe RIGHT!\n");
			  
			  break;
		  case "KeyS":
			  console.log("s/S key: Move BACK!\n");
			  
			  break;
		  case "KeyW":
			  console.log("w/W key: Move FWD!\n");
			  
			  break;
		  //----------------Arrow keys------------------------
		  case "ArrowLeft": 	
			  console.log(' left-arrow.');
			  // and print on webpage in the <div> element with id='Result':
			
			  break;
		  case "ArrowRight":
			  console.log('right-arrow.');
			
			break;
		  case "ArrowUp":		
			  console.log('   up-arrow.');
			
			  break;
		  case "ArrowDown":
			  console.log(' down-arrow.');
			
			break;	
	  default:
		console.log("UNUSED!");
			
		break;
	  }
  }
  
  function myKeyUp(kev) {
  //===============================================================================
  // Called when user releases ANY key on the keyboard; captures scancodes well
  
	  console.log('myKeyUp()--keyCode='+kev.keyCode+' released.');
  }